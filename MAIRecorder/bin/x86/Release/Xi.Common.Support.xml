<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Common.Support</name>
    </assembly>
    <members>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.Dispose">
            <summary>
            This method is the standard Dispose() method
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.Finalize">
            <summary>
            This method is the standard destructor
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.Dispose(System.Boolean)">
            <summary>
            This method disposes of this object if requested
            </summary>
            <param name="isDisposing">Indicates when TRUE that the 
            object is to be disposed</param>
            <returns>Returns true to indicate the object was disposed.</returns>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._FilePath">
            <summary>
            This property hold the full path of the manual 
            configuration file for Xi Servers.  This is derived from 
            the .config file for the Discovery Server .exe.  The key 
            is "ServerIPAddressFile" and the value may contain 
            environment variables quoted with '%'.  This allows for 
            the manual configuration of a list of Xi Servers.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._FileName">
            <summary>
            This property hold the full name (with path) of the manual 
            configuration file for Xi Servers.  This is derived from 
            the .config file for the Discovery Server .exe.  The key 
            is "ServerIPAddressFile" and the value may contain 
            environment variables quoted with '%'.  This allows for 
            the manual configuration of a list of Xi Servers.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._PnrpSectionPresent">
            <summary>
            Indicates if the PNRP Section of the Manual Configuration File 
            is present.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._PnrpSectionHeader">
            <summary>
            Specifies the header line for the PNRP Section of the Manual Configuration File
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._FileStream">
            <summary>
            The Manual Configuration File
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._StreamReader">
            <summary>
            The Manual Configuration File Reader
            </summary>
        </member>
        <member name="F:Xi.Common.Support.ServerUrlConfigFile._StreamWriter">
            <summary>
            The Manual Configuration File Reader
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.OpenFile">
            <summary>
            This method creates the directory and manual configuration file if necessary
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.CloseFile">
            <summary>
            This method creates the directory and manual configuration file if necessary
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.GetUrlsFromFile(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Retrieves the list of URLs from the Manual Configuration File. Then determines 
            which are new and which were deleted (which were in the previous list but not 
            in the current list).
            </summary>
            <returns>A new manual configuration section if there were errors in this section</returns>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.ConvertFileLineToUrl(System.String,System.String@)">
            <summary>
            This method converts a line in a file to a URL if possible
            </summary>
            <param name="line">The line to convert</param>
            <returns>The original line if it is a comment or a valid URL line. Otherwise the 
            input line contains an invalid URL and two lines are returned. The first contains 
            a comment line that indicates the URL is in error and the second line contains the 
            URL preceded by the "#" comment indicator.</returns>
        </member>
        <member name="M:Xi.Common.Support.ServerUrlConfigFile.CreateErrorLines(System.String,System.String)">
            <summary>
            This method creates error lines for the manual configuration section of the manual 
            configuration file.
            </summary>
            <param name="msg">The message line to use</param>
            <param name="line">The line in error</param>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.Extensions.ContractDataExt.MakeMessageKey(Xi.Contracts.Data.EventMessage)">
            <summary>
            This method creates an identifier for the event/alarm being reported. If two occurrences 
            of the same alarm are reported, they will have the same key.  However, different occurrences 
            of the same event will have different message keys.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Common.Support.ChannelCloser">
            <summary>
            This class is used to properly close a WCF client proxy.  It aborts or closes
            the proxy based on the channel status and whether an exception is encountered.
            It has two calling methods, one where the proxy has a short life, and the other
            to be used when the proxy is held over the life of a single method.
            </summary>
            <example>
            Usage 1: Short lived proxy
            void SomeMethod()
            {
                SomeWcfProxy proxy = new SomeWcfProxy();
                using (new ChannelCloser(proxy))
                {
                   proxy.MakeCall();
                    ...
                }
            }
            
            Usage 2: Long lived proxy
            void CreateProxy()
            {
                SomeWcfProxy proxy = new SomeWcfProxy();
                ...
            }
            void DestroyProxy()
            {
               ChannelCloser.Close(proxy);
            }
            </example>
        </member>
        <member name="M:Xi.Common.Support.ChannelCloser.#ctor(System.Object)">
            <summary>
            Constructs a WCF channel closer object
            </summary>
            <param name="channelObj">WCF proxy object</param>
        </member>
        <member name="M:Xi.Common.Support.ChannelCloser.Dispose">
            <summary>
            Properly releases and closes the held WCF proxy
            </summary>
        </member>
        <member name="M:Xi.Common.Support.ChannelCloser.Close(System.Object)">
            <summary>
            This method closes the passed proxy object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Xi.Common.Support.TransportDataType">
            <summary>
            This enumeration is not include in any contract interface method.
            However, it may be useful to other elements of the system.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.Unknown">
            <summary>
            Unknown how the data value is / was transported.
            VT_EMPTY in an Unknown type
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.Double">
            <summary>
            The data value is / was transported as a double (64 Bits).
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.Uint">
            <summary>
            The data value is / was transported as a uint (32 Bits).
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.Object">
            <summary>
            The data value is / was transported as an object.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.EventMessage">
            <summary>
            The data value is / was transported as an Event Message;
            </summary>
        </member>
        <member name="F:Xi.Common.Support.TransportDataType.MaxTransportDataType">
            <summary>
            This must be the last entry in the enum!
            </summary>
        </member>
        <member name="T:Xi.Common.Support.PNRPHelper">
            <summary>
            These methods are used to set and resolve PNRP services through the
            PeerToPeer protocol stack built into Windows Vista/Windows 7 and optionally
            available on Windows XP.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.PNRPHelper.ResolveServices(System.String)">
            <summary>
            Locate all the registered services for a given mesh name
            </summary>
            <param name="meshName"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.PNRPHelper.RegisterService(System.String,System.Int32,System.String)">
            <summary>
            This registers a given port + url with a specified mesh
            </summary>
            <param name="meshName"></param>
            <param name="port"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Common.Support.LookupResultCodes">
            <summary>
            Define a delegate to provide for result code lookups in general.
            </summary>
            <param name="resultCode"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Common.Support.FaultStrings">
            <summary>
            This class is used to lookup error codes
            </summary>
        </member>
        <member name="M:Xi.Common.Support.FaultStrings.#ctor">
            <summary>
            Internal constructor which creates the default set if the server does not supply them
            </summary>
        </member>
        <member name="M:Xi.Common.Support.FaultStrings.ParseErrorNumber(System.String)">
            <summary>
            Parses out error codes and allows for both integer and hexidecimal varieties.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.FaultStrings.Get(System.UInt32)">
            <summary>
            Retrieves the error text for a given error code.
            </summary>
            <param name="errorCode">Error Code</param>
            <returns>Text Message</returns>
        </member>
        <member name="M:Xi.Common.Support.FaultStrings.Get(System.UInt32,Xi.Common.Support.LookupResultCodes)">
            <summary>
            Retrieves the error text for a given error code.
            </summary>
            <param name="errorCode">Error Code</param>
            <param name="lookUpResultCodes">Delegate to lookup an error code</param>
            <returns>Text Message</returns>
        </member>
        <member name="M:Xi.Common.Support.FaultStrings.GetResultCodeString(System.UInt32,Xi.Common.Support.LookupResultCodes)">
            <summary>
            This helper method may be used to lookup a single error message string.
            </summary>
            <param name="resultCode"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Common.Support.Time">
            <summary>
            A time specified as either an absolute or relative value.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.Time.#ctor">
            <summary>
            Initializes the object with its default values.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.Time.#ctor(System.DateTime)">
            <summary>
            Initializes the object with an absolute time.
            </summary>
            <param name="time">The absolute time.</param>
        </member>
        <member name="M:Xi.Common.Support.Time.#ctor(System.String)">
            <summary>
            Initializes the object with a relative time.
            </summary>
            <param name="time">The relative time.</param>
        </member>
        <member name="M:Xi.Common.Support.Time.ResolveTime">
            <summary>
            Converts a relative time to an absolute time by using the system clock.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.Time.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="M:Xi.Common.Support.Time.Parse(System.String)">
            <summary>
            Parses a string representation of a time.
            </summary>
            <param name="buffer">The string representation to parse.</param>
            <returns>A Time object initailized with the string.</returns>
        </member>
        <member name="M:Xi.Common.Support.Time.BaseTypeToString(Xi.Common.Support.RelativeTime)">
            <summary>
            Converts a base time to a string token.
            </summary>
            <param name="baseTime">The base time value to convert.</param>
            <returns>The string token representing the base time.</returns>
        </member>
        <member name="P:Xi.Common.Support.Time.IsRelative">
            <summary>
            Whether the time is a relative or absolute time.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.Time.AbsoluteTime">
            <summary>
            The time as abolute UTC value.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.Time.BaseTime">
            <summary>
            The base for a relative time value.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.Time.Offsets">
            <summary>
            The set of offsets to be applied to the base of a relative time.
            </summary>
        </member>
        <member name="T:Xi.Common.Support.XiDataTypeHandle">
            <summary>
            This enumeration defines handles (short form identifiers) for 
            standard Xi Data Type Ids, typically derived from COM data types.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeUnknown">
            <summary>
            VT_EMPTY is transported using long with this data type.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeInt8">
            <summary>
            Signed integers are transported as long with one of these data types.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeUInt8">
            <summary>
            Unsigned integers are transported as long with one of these data types.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeFloat32">
            <summary>
            Floating point values are transported as Double with one of these data Types.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeObject">
            <summary>
            Most other data types are transported as object using one of these data types.
            However, some of these may be transported as long.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiDataTypeHandle.DataValueTypeNotEstablished">
            <summary>
            The data type was not established.
            </summary>
        </member>
        <member name="T:Xi.Common.Support.TimeOffset">
            <summary>
            An offset component of a relative time.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.TimeOffset.OffsetTypeToString(Xi.Common.Support.RelativeTime)">
            <summary>
            Converts a offset type to a string token.
            </summary>
            <param name="offsetType">The offset type value to convert.</param>
            <returns>The string token representing the offset type.</returns>
        </member>
        <member name="P:Xi.Common.Support.TimeOffset.Value">
            <summary>
            A signed value indicated the magnitude of the time offset.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.TimeOffset.Type">
            <summary>
            The time interval to use when applying the offset.
            </summary>
        </member>
        <member name="T:Xi.Common.Support.TimeOffsetCollection">
            <summary>
            A collection of time offsets used in a relative time.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Add(System.Int32,Xi.Common.Support.RelativeTime)">
            <summary>
            Adds a new offset to the collection.
            </summary>
            <param name="value">The offset value.</param>
            <param name="type">The offset type.</param>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Parse(System.String)">
            <summary>
            Initializes the collection from a set of offsets contained in a string. 
            </summary>
            <param name="buffer">A string containing the time offset fields.</param>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.CopyTo(Xi.Common.Support.TimeOffset[],System.Int32)">
            <summary>
            Copies the objects to an Array, starting at a the specified index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination for the objects.</param>
            <param name="index">The zero-based index in the Array at which copying begins.</param>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Insert(System.Int32,Xi.Common.Support.TimeOffset)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the IList. </param>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Remove(Xi.Common.Support.TimeOffset)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="value">The Object to remove from the IList.</param>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Contains(Xi.Common.Support.TimeOffset)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value">The Object to locate in the IList.</param>
            <returns>true if the Object is found in the IList; otherwise, false.</returns>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.IndexOf(Xi.Common.Support.TimeOffset)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="value">The Object to locate in the IList.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.Add(Xi.Common.Support.TimeOffset)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value">The Object to add to the IList. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Xi.Common.Support.TimeOffsetCollection.CreateOffset(System.Boolean,System.Int32,System.String)">
            <summary>
            Creates a new offset object from the components extracted from a string.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.TimeOffsetCollection.Item(System.Int32)">
            <summary>
            Accessor for elements in the time offset collection.
            </summary>
        </member>
        <member name="T:Xi.Common.Support.RelativeTime">
            <summary>
            Possible base or offset types for relative times.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Now">
            <summary>
            Start from the current time.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Second">
            <summary>
            The start of the current second or an offset in seconds.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Minute">
            <summary>
            The start of the current minutes or an offset in minutes.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Hour">
            <summary>
            The start of the current hour or an offset in hours.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Day">
            <summary>
            The start of the current day or an offset in days.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Week">
            <summary>
            The start of the current week or an offset in weeks.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Month">
            <summary>
            The start of the current month or an offset in months.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.RelativeTime.Year">
            <summary>
            The start of the current year or an offset in years.
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "T:Xi.Common.Support.FaultHelpers" ignoriert -->
        <member name="M:Xi.Common.Support.FaultHelpers.Create(System.Exception)">
            <summary>
            This method will return a FaultException with a XiFault
            where the ErrorCode will be E_XIMESSAGEFROMEXCEPTION.
            The message is from the exception passed into this method.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Xi.Common.Support.FaultHelpers.Create(System.String)">
            <summary>
            This method will return a FaultException with a XiFault
            where the ErrorCode will be E_XIFAULTMESSAGE.
            </summary>
            <param name="message">Error string</param>
        </member>
        <member name="M:Xi.Common.Support.FaultHelpers.Create(System.UInt32)">
            <summary>
            This throws a new FaultException with the XiFault detail
            </summary>
            <param name="errorCode">Error string</param>
        </member>
        <member name="M:Xi.Common.Support.FaultHelpers.Create(System.UInt32,System.String)">
            <summary>
            This throws a new FaultException with the XiFault detail
            </summary>
            <param name="errorCode">Error code</param>
            <param name="message">Error string</param>
        </member>
        <member name="M:Xi.Common.Support.FaultHelpers.Succeeded(System.UInt32)">
            <summary>
            This method provides functionality like the SUCCEEDED macro.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.FaultHelpers.Failed(System.UInt32)">
            <summary>
            This method provides functionality like the FAILED marco.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Common.Support.Extensions.DataValueArrayExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.Common.Support.Extensions.DataValueArrayExt.HasDataValues(Xi.Contracts.Data.DataValueArrays)">
            <summary>
            Returns true if at least one value in the DataValueArrays
            </summary>
            <param name="valueArrays"></param>
            <returns></returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "T:Xi.Common.Support.StatusCodeStatusBits" ignoriert -->
        <member name="T:Xi.Common.Support.XiStatusCodeDecoder">
            <summary>
            A Value Status Code is associated with a Xi Data Value providing 
            information about the status of the value.  This version of the 
            Value Status Code is intended primarily for use by an OPC Xi 
            client to interpret the meaning of the status value.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.#ctor(System.UInt32)">
            <summary>
            As the Xi Status Code is represented as a uint in the Xi Contracts 
            this constructor should be sufficient for an Xi client.
            </summary>
            <param name="statusCode">A Xi Status Code</param>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.#ctor(System.UInt32,Xi.Common.Support.LookupResultCodes)">
            <summary>
            As the Xi Status Code is represented as a uint in the Xi Contracts 
            this constructor should be sufficient for an Xi client.
            </summary>
            <param name="statusCode"></param>
            <param name="lookUpResultCode"></param>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.DecodeValueStatus">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code. 
            </summary>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.DecodeValueStatus(Xi.Common.Support.LookupResultCodes)">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code. 
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides 
            a callback to the context LookupResultCodes this allows the 
            Fault Strings class to lookup error codes that are not currently known. </param>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.DecodeHistoryStatus">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code.  This method 
            may be used when the value is a historical value with the 
            additional information about historical values.
            </summary>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.DecodeHistoryStatus(Xi.Common.Support.LookupResultCodes)">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code.  This method 
            may be used when the value is a historical value with the 
            additional information about historical values.
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides 
            a callback to the context LookupResultCodes this allows the 
            Fault Strings class to lookup error codes that are not currently known. </param>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.LoadCodesIntoStringDictionaries">
            <summary>
            This method loads dictionaries with various status / quality codes and the coresponding strings.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.ParseNumber(System.String)">
            <summary>
            Parses out error codes and allows for both integer and hexidecimal varieties.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.ToString">
            <summary>
            This override of the To String method will generally convert most Value Status Codes to a user friendly string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Common.Support.XiStatusCodeDecoder.ToString(Xi.Common.Support.LookupResultCodes)">
            <summary>
            This version of the To String method will also convert most Value Status Codes to a user friendly string 
            with the additional advantage of calling the server to lookup a status code.
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides for a callback to the context LookupResultCodes 
            this allows the Fault Strings class to lookup error codes that are not currently known.  </param>
            <returns></returns>
        </member>
        <member name="F:Xi.Common.Support.XiStatusCodeDecoder._statusCode">
            <summary>
            The Xi Status Code as defined in Xi Contracts Data.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiStatusCodeDecoder._lookUpResultCode">
            <summary>
            The callback delegate used to look up result codes.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiStatusCodeDecoder._statusCodesToStringDictionary">
            <summary>
            Dictionary used to convert from quality codes to strings.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiStatusCodeDecoder._limitedCodeToStringDictionary">
            <summary>
            Dictionary used to convert from limited codes to strings.
            </summary>
        </member>
        <member name="F:Xi.Common.Support.XiStatusCodeDecoder._historyCodestoStringDictionary">
            <summary>
            Dictionary used to convert from history codes to strings.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsGood">
            <summary>
            A value is considered good when the Quality Bits specifies "Good".
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsUncertain">
            <summary>
            A value is considered uncertain when the Quality Bits specifies the "Uncertain".
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsUsable">
            <summary>
            A value is considered usable when the Quality Bits specify either "Good" or "Uncertain".
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsBad">
            <summary>
            A value is considered bad when the Quality Bits specifies the "Bad".
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsHRESULT">
            <summary>
            When the Quality Bits are "Bad Server Access" the value is not usable.  
            An HRESULT is encoded in the status.
            The HRESULT may be retrieved from the HRESULT property.
            <para>This property returns "true" when the Xi Status Value 
            represents an HRESULT encoded in the status.</para>
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HasHRESULT">
            <summary>
            A subset of HRESULT values may be included with in a Xi Status Code.  
            It should be noted that all HRESULT values that may be included in 
            a Xi Status Code are SUCCEEDED(hr).  Any FAILED(hr) the value is 
            considered not useable and bad and the HRESULT is encoded in the 
            Xi Status Code.
            <para>This property returns "true" when an HRESULT is encoded in the status.</para>
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HasVendorSpecificDetail">
            <summary>
            This property will return "true" when Vendor Specific Detail is present in the Xi Status Code.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsNotLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is not limited.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsLowLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is low limited.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsHighLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is high limited.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.IsConstant">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is constant;
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HRESULT">
            <summary>
            This property is used to obtain an HRESULT that may be present in the Xi Status Code.
            When this method is not able to extract the HRESULT a value of -1 is returned.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.StatusByte">
            <summary>
            This property returns the full Status Byte as defined by OPC .NET.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.StatusBits">
            <summary>
            This property returns the Xi (OPC DA) status bits. 
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.QualityBits">
            <summary>
            This property returns just the Quality bits (the two high-order bits) from the Xi (OPC DA) status bits.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.StatusCodeGroup">
            <summary>
            This property returns just the Status Code Group; the high order two bits of the Xi StatusCode.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.StatusCodeSubstatusBits">
            <summary>
            This property returns just the unsigned integer value of the 4 Substatus bits of the Xi Status Code.
            The substatus bits are the four bits that follow the Status Group Bits (the two high order bits) 
            The valid values are 0 to 15.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.LimitBits">
            <summary>
            This property returns the Xi (OPC DA) limit bits.
            Note that zero is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.OpcDaQuality">
            <summary>
            Returns the equivalent of the OPC DA Quality.
            Note: 0x0080 is returned if the Xi Status Code is an HRESULT.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.OpcHdaQuality">
            <summary>
            Returns the equivalent of the OPC HDA Quality.
            Note: 0x0080 is returned if the Xi Status Code is an HRESULT.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HistoricalValueType">
            <summary>
            This property returns the Xi Historical value type.
            Note that zero is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HistoricalBoundingValue">
            <summary>
            This property returns the Historical Bounding Value flag.
            Note that false is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Xi.Common.Support.XiStatusCodeDecoder.HistoricalConversionError">
            <summary>
            This property returns the Historical Conversion Error flag.
            Note that false is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.FilterComparisonValueConversion.ConvertStringComparisonValueToObject(Xi.Contracts.Data.FilterCriterion)">
            <summary>
            This method converts a string version of an operand's comparison value to the 
            appropriate object type.
            </summary>
            <param name="filterCriterion">The FilterCriterion that contain the operand name 
            and comparison value.</param>
            <returns>An error message if an error occurred. Otherwise null.</returns>
        </member>
        <member name="T:Xi.Common.Support.Extensions.OperationContextExt">
            <summary>
            This class provides some extension helpers for pulling data out of the 
            WCF operation context.  Note that these are only usable in the call context of
            an active WCF operation.
            </summary>
        </member>
        <member name="M:Xi.Common.Support.Extensions.OperationContextExt.GetCurrentUser(System.ServiceModel.OperationContext)">
            <summary>
            This returns the current user (if any) on the operation context.
            </summary>
            <param name="ctx">Operation Context</param>
            <returns>Username</returns>
        </member>
        <member name="M:Xi.Common.Support.Extensions.OperationContextExt.GetRemoteAddress(System.ServiceModel.OperationContext,System.String@,System.Int32@)">
            <summary>
            This returns the remote client's IP address and port when they are using a TCP/IP based channel
            </summary>
            <param name="ctx">Operation Context</param>
            <param name="ipAddress">Returning IP address</param>
            <param name="port">Returnign port</param>
            <returns>True/False success code</returns>
        </member>
        <member name="M:Xi.Common.Support.Extensions.OperationContextExt.GetBinding(System.ServiceModel.OperationContext)">
            <summary>
            This returns the binding which was used to create the current operation context.
            </summary>
            <param name="ctx">Operation Context</param>
            <returns>Binding name</returns>
        </member>
    </members>
</doc>
