<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Contract.Constants</name>
    </assembly>
    <members>
        <member name="T:Xi.Contracts.Constants.XiFeatures">
            <summary>
            This enumeration assigns a flag value to each of the Xi 
            features and then defines standard sets of features required  
            for all data, event, data journal, and event journal servers.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.CustomDataType_Feature">
            <summary>
            The server supports custom data types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.AbsoluteDeadband_Feature">
            <summary>
            The server supports the use of absolute deadband filters in 
            addition to the standard percent deadband filters.  Percent 
            deadband filters define the the percent of change relative 
            to the valid value range for a data object, while absolute 
            deadband defines the percentage of change relative to the 
            value (the range is not taken into account).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.IndexedAccess_Feature">
            <summary>
            The server supports the capability to access individual elements 
            of arrays and structures. Individual elements are identified 
            using 0-based indexes for arrays and 1-based indexes for 
            structures.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.IndexedRangeAccess_Feature">
            <summary>
            The server supports the capability to access a range of array 
            elements or fields of a structure. Ranges are identified using 
            a pair of indexes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.MibVersionSubscribe_Feature">
            <summary>
            The server supports the capability to add the Standard MIB 
            Version number to a list.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFeatures.BufferingRate_Feature">
            <summary>
            The server supports the bufferingRate parameter of the 
            IResourceManagement.DefineList() method.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.InstanceIds">
            <summary>
            This class defines standard instance ids.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_MIB">
            <summary>
            The ResourceType for access to the Standard and Vendor MIBs.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_DA">
            <summary>
            The ResourceType for access to Data.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_AE">
            <summary>
            The ResourceType for access to alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_HDA">
            <summary>
            The ResourceType for access to historical (journaled) data.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ResourceType_HAE">
            <summary>
            The ResourceType for access to historical (journaled) alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.MibCurrentVersion">
            <summary>
            The InstanceId used for subscribing to the Current Version of the 
            Standard MIB.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.InstanceIds.ServerMibVersionId">
            <summary>
            <para>The InstanceId of the Version number of Standard MIB object.  
            This InstanceId allows the client to add this version number to a data list 
            and be notified via callbacks or polling when the state changes.</para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeLimitBits">
            <summary>
            The Limit bits indicates whether a value is liimited or not.
            It is valid regardless of the values of the StatusBits and SubstatusBits. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LimitBitsMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the limited status of the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LimitBitsShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the limit bits into the low bits or into the 
            Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.NotLimited">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.NotLimitedBits">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LowLimited">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.LowLimitedBits">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.HighLimited">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.HighLimitedBits">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.Constant">
            <summary>
            The value is a constant and cannot move.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeLimitBits.ConstantBits">
            <summary>
            The value is a constant and cannot move.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeStatusBits">
            <summary>
            <para>The Status Bits are the high-order 6 bits of the high-order byte (the StatusByte) of the XiStatus 
            code as defined in Xi.Contracts.Data.XiStatusCode.  The high-order two bits of the Status Bits are the 
            Status Group bits. They indicate whether a value is good, bad, or uncertain and when bad, whether or 
            not the bad status was assigned by the server. Server assigned bad status codes are typically assigned 
            when the server is unable to retrieve the value from the underlying system.</para>  
            <para>The four bits following the two Status Group bits indicate the reason associated with the Status 
            Group bits value.  The final two bits of the StatusByte are the limit bits. Their values are defined 
            in Xi.Contracts.Contstants.XiStatusCodeLimitBits.  This layout is summarized as follows.</para>
            <para>GGRRRRLL, where </para>
            <para>    GG     = Status Group Bits</para>
            <para>    RRRR   = Reason Bits </para>
            <para>    LL     = Limit Bits </para>
            <para>In the value definitions for the StatusBits, GG values are individually defined, but the 
            Reason Bit values are defined in combination with the Group Bits as GGRRRR. The Limit Bits are 
            separately defined in Xi.Contracts.Contstants.XiStatusCodeLimitBits.</para>
            <para>This class defines values for the 2-bit Status Group Bits, the 6-bit Status Bits, and 
            additional values for their manipulation, such as bit masks and shift values.</para>
            <para>In general there are two definitions for each 2-bit Status Group Bits value and each 6-bit 
            Status Bits value.  One value is the hex representation of the two-bit value or the six-bit value. 
            The other is the hex representation in the context of the full 32-bit Xi Status Code. For example,
            the GG bits for the Uncertain value are 01. Therefore, the two definitions for it are: </para>
            <para>StatusCodeStatusGroupUncertain = 0x1,  // two-bit value</para>
            <para>StatusCodeStatusGroupUncertainBits = 0x40000000, // 32-bit value</para>
            <para>The BadServerAccess values are used to indicate that the Xi server was unable to access 
            the data object value from the underlying OPC Classic server or from the underlying system.</para>
            <para>In general an HRESULT value of SUCCEEDED(hr) returned by the OPC Classic server indicates 
            successful access of the data object. In these cases, the Xi server would normally use the OPC 
            Quality returned with the data object value to construct the Xi Status Code.</para>
            <para>However, there can be HRESULT values that are SUCCEEDED(hr), but that indicates that the OPC 
            Classic server was unable to access the data object, and where the OPC Quality returned is not useful. 
            In these cases, the Xi server can construct an Xi Status Code that indicates BAD SERVER ACCESS. 
            BAD SERVER ACCESS can also be constructed by the Xi Server when the returned HRESULT indicates 
            failure.</para>
            <para>See ValueStatusCode in both Xi Common Support and Xi OPC Com API for additional 
            details on the encoding of HRESULT values.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusByteMask">
            <summary>
            Mask used to obtain the full Status Byte
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusMask">
            <summary>
            The mask for the Status Bits (the high-order six bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeShiftCount">
            <summary>
            The StatusCodeShiftCount is used to shift the Status Bits (the high-order six bits) 
            of the Xi Status Code uint to its low-order six bits, or to initially set the Status 
            Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order six bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.SubStatusBitsShiftedMask">
            <summary>
            Mask used to keep the shifted sub status code bits
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusByteShiftCount">
            <summary>
            The StatusCodeStatusByteShiftCount is used to shift the Status Byte (the high-order 
            byte) of the Xi Status Code uint to its low-order byte, or to initially set the 
            Status Byte value into a uint that is to become the Xi Status Code and then shift 
            them to the high-order byte. Note that the Xi Status Byte uses the same bit pattern 
            as the low order byte of the OPC DA Quality so it can be copied the Xi Status Code 
            uint and then shifted to the proper byte position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupMask">
            <summary>
            The mask for the Status Group Bits (the high order two bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeSubstatusBitsMask">
            <summary>
            The mask for the SubStatus bits of the Xi Status Code. The substatus bits are the 
            four bits that follow the Status Group Bits (the two high order bits).
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupShiftCount">
            <summary>
            The StatusCodeStatusGroupShiftCount is used to shift the Status Group Bits (the high-order 
            two bits) of the Xi Status Code uint to its low-order two bits, or to initially set the Status 
            Group Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupBadBits">
            <summary>
            The 32-bit value for bad status. This value can be used to test for 
            bad status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertainBits">
            <summary>
            The 32-bit value for uncertain status. This value can be used to test for 
            uncertain status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing an uncertain status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBadBits">
            <summary>
            The 32-bit value for bad server access status. This value can be used to test for 
            bad server access status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad server access status code by setting the 
            Xi Status Code uint to this value.  Bad server access indicates that the Xi server 
            was unable to access the underlying data source (e.g. OPC DA server) for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.StatusCodeStatusGroupGoodBits">
            <summary>
            The 32-bit value for good status. This value can be used to test for good status after
            masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a good status code by setting the Xi Status Code 
            uint to this value.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNonSpecific">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNonSpecificBits">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific Bits when the value is in the Xi defined high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadConfigError">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadConfigErrorBits">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNotConnected">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadNotConnectedBits">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadDeviceFailure">
            <summary>
            A device failure has been detected.
            Use Bad Device Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadDeviceFailureBits">
            <summary>
            A device failure has been detected.
            Use Bad Device Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadSensorFailure">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadSensorFailureBits">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadLastKnownValue">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadLastKnownValueBits">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadCommFailure">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadCommFailureBits">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadOutOfService">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadOutOfServiceBits">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadWaitingForInitialData">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadWaitingForInitialDataBits">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainNonSpecific">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainNonSpecificBits">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainLastUsableValue">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainLastUsableValueBits">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSensorNotAccurate">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSensorNotAccurateBits">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceeded">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceededBits">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSubNormal">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.UncertainSubNormalBits">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNonSpecific">
            <summary>
            Deprecated.
            The value is bad but no specific reason is known.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessInstanceIdInvalid">
            <summary>
            Deprecated.
            The format of the InstanceId is not valid. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessObjectUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to a object that could not be found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessObjectElementUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to element of an object and that 
            element could not be found.         
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessAccessDenied">
            <summary>
            Deprecated.
            Access to the value was denied.
            {The Additional Detail Value must be zero.}
            <para>*** Encode Win32 Access Denied as Xi Status Code 0x98000005 ***</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNonSpecificBits">
            <summary>
            This bit pattern is used for not transformed HRESULT / NTSTATUS / Win32 codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResult">
            <summary>
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResultBits">
            <summary>
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarning">
            <summary>
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarningBits">
            <summary>
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusInformational">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessSuccessNTStatusInfoBits">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusError">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessNTStatusErrorBits">
            <summary>
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccess">
            <summary>
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccessBits">
            <summary>
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfo">
            <summary>
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfoBits">
            <summary>
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarning">
            <summary>
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarningBits">
            <summary>
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusError">
            <summary>
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusErrorBits">
            <summary>
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccess">
            <summary>
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccessBits">
            <summary>
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfo">
            <summary>
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfoBits">
            <summary>
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarning">
            <summary>
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarningBits">
            <summary>
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusError">
            <summary>
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.BadServerAccessCustNTStatusErrorBits">
            <summary>
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodNonSpecific">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodNonSpecificBits">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodLocalOverride">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeStatusBits.GoodLocalOverrideBits">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeGroups">
            <summary>
            This enumeration defines the unsigned integer values for the high order two bits of the 
            Xi Status Code.  These two bits are referred to as the StatusCodeStatusGroup.
            The values are given as two bit values from 0 to 3.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeGroups.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.HResultBitCodes">
            <summary>
            This enumeration defines value that are helpful 
            while encoding and decoding HRESULT codes and
            Win32 error codes.
            See Xi Common Support ValueStatusCode class.
            See http://msdn.microsoft.com/en-us/library/cc231196(v=PROT.10).aspx 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.ShiftEncodingBits">
            <summary>
            Number of bit positions to shift the error type encoding
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.ShiftedEncodingMask">
            <summary>
            Mask for the four encoding bits
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Failed">
            <summary>
            HRESULT Failed bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Reserved">
            <summary>
            HRESULT Reserved bit - Used in encoding Win32 error into an HRESULT
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.Customer">
            <summary>
            HRESULT Customer bit - Used to indicate that this is an application defined error code
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatus">
            <summary>
            HRESULT NTStatus bit - Used to indicate that this HRESULT represents a Win32 error code
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityMask">
            <summary>
            Win32 Severity Code mask - The top two bits of a Win32 error code generally represents the sevrity
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityBit0">
            <summary>
            Win32 Severity Code low order bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.NTStatusSeverityBit2">
            <summary>
            Win32 Severity Code high order bit
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.FacilityMask">
            <summary>
            The mask for the Facility code of an HRESULT
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.CodeMask">
            <summary>
            The mask for the low 16 bits of the HRESULT that provides the specifics of the error
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.FacilityAndCodeMask">
            <summary>
            This maks is used to keep the combined Facility and Code
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingMask">
            <summary>
            The mask for the high-order four bits of an HRESULT
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingHResultSuccessNTStatusSuccess">
            <summary>
            HRESULT represents a SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingHResultFailNTStatusInfo">
            <summary>
            HRESULT represents a FAILED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusInformational">
            <summary>
            HRESULT represents a severity Informational Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusWarning">
            <summary>
            HRESULT represents a severity Warning Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingNTStatusError">
            <summary>
            HRESULT represents a severity Error Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.HResultBitCodes.EncodingCustSuccessHResult">
            <summary>
            HRESULT represents a Customer SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType">
            <summary>
            The AdditionalDetailType indicates how the 16-bit AdditionalDetail 
            property of the StatusCode is used. Unused values are reserved. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalDetailTypeMask">
            <summary>
            This mask value may be used to keep only the Additional Detail Type code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalDetailMask">
            <summary>
            Use this mask to keep the Additional Details Value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.NotUsed">
            <summary>
            The AdditionalDetail property is not used and should be ignored.
            Its value should be set to 0. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecificDetail">
            <summary>
            The AdditionalDetail property contains a vendor-specific value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecificDetailBits">
            <summary>
            The AdditionalDetail property contains a vendor-specific value
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.DefaultHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.DefaultHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.XiHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.XiHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.IO_ERROR_CODE">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.IO_ERROR_CODEBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.ITF_HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.ITF_HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.Win32HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.Win32HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalErrorCode">
            <summary>
            <para>This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.</para>  
            <para>This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.AdditionalErrorCodeBits">
            <summary>
            <para>This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.</para>  
            <para>This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.</para>
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.XiStatusCodeAdditionalDetailType.VendorSpecific(System.UInt32)">
            <summary>
            This property returns the AdditionalDetail as a 16-bit vendor-specific value 
            if the AdditionalDetailType is set to AdditionalDetailType.VendorSpecific.  
            If the AdditionalDetailType is set to a different value, 0 is returned.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetail is to be extracted. 
            </param>
            <returns>
            The vendor-specific AdditionalDetail value. 0 if the AdditionalDetailType 
            indicates that the AdditionalDetail does not contain a vendor-specific value.
            </returns>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperandValues">
            <summary>
            This class defines standard constant values for filter operands.
            All values are case independent and should be up-shifted or down-shifted by 
            the server when used in comparisons.. They are defined here in camel case 
            for read-ability in displays.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Branch">
            <summary>
            A valid value for FilterOperand.BranchOrLeaf.  
            This value is used to select objects that are branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Leaf">
            <summary>
            A valid value for FilterOperand.BranchOrLeaf.
            This value is used to select objects that are leaves.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Read">
            <summary>
            A valid value for FilterOperand.AccessRight.
            This value is used to select readable objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.Write">
            <summary>
            A valid FilterOperand.AccessRight value.
            This value is used to select writable objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.AbsoluteValue">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using absolute value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.PercentOfSpan">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using percent of span.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandValues.PercentOfValue">
            <summary>
            A valid FilterOperand.ExceptionDeviationType value.
            This value is used to select values whose change is calcuated 
            using percent of value.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiFaultCodes">
            <summary>
            <para>This class defines standard Xi success and fault codes.
            Xi servers can report error to the client as:</para>
            <para>a)	Exceptions, if the handling of a request completely fails</para>
            <para>b)	Result codes. These are uint values that hold any HResult code.</para> 
            <para>c)	Status codes. These are used only in methods that return data values. </para>
            <para>	The uint status code merges OPC quality and a subset of HResult codes. </para>
            <para>	Additional error info can be passed in the associated ErrorInfo object.</para>
            <para>NOTE: Entries in this file should have a corresponding entry in either ErrorCodes.xml
            or ErrorCodesOpc.xml except Win32/COM error code values that are defined here with the
            exact values from WinError.h or other Microsoft defined error codes.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.S_OK">
            <summary>
            This code indicates success.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.S_FALSE">
            <summary>
            This code is used to indicate success with additional failure information;
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOTIMPL">
            <summary>
            <para>Win32 Error Code</para>
            This is the standard error code for not implemented.  
            It is used as both a result code and in exceptions 
            when a function is not implemented.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_FAIL">
            <summary>
            <para>Win32 Error Code</para>
            This code indicates a general failure.  The error text 
            associated with this error code may be more 
            specific.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOCONTEXT">
            <summary>
            This code indicates failure.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADLISTID">
            <summary>
            This code indicates that an invalid list id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADENDPOINTID">
            <summary>
            This code indicates that an invalid endpoint id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_ALIASNOTFOUND">
            <summary>
            No match was found for the server alias supplied.
            Alias value (client alias) is returned as the client alias.
            No translation to server alias is possible.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_SEEERRORINFO">
            <summary>
            See the Error Info structure for information.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_NOTFOUND">
            <summary>
            This code indicates that the requested object was not found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTDISABLED">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list was in the disabled state.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_BADARGUMENT">
            <summary>
            This code indicates that the request contained a bad parameter value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INCONSISTENTUSEAGE">
            <summary>
            This code indicates that parameter of a method identifies an object whose 
            type is inconsistent with the method. For example, EnableListElementUpdating() 
            returns E_INCONSISTENTUSEAGE for a serverAlias if that serverAlias does not 
            identify a list element whose type is not DataListValue.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INVALIDREQUEST">
            <summary>
            The requested action is invalid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_ENDPOINTERROR">
            <summary>
            The requested operation failed due to an Endpoint related error condition.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INCONSISTENT_TRANSPORTDATATYPE">
            <summary>
            The Transport Data Type is not valid or is inconsistent.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_SERVER_SHUTDOWN">
            <summary>
            The server has shutdown.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_WRAPPEDSERVER_NOT_ACCESSIBLE">
            <summary>
            The wrapped server is not accessible.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_WRAPPEDSERVER_EXCEPTION">
            <summary>
            An exception occured in a COM server method
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTNOTATTACHEDTOENDPOINT">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list was not attached to the appropriate endpoint.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTELEMENTDISABLED">
            <summary>
            This code indicates that the requested operation could not be completed 
            because the list element was in the disabled state.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_INVALIDVALUE_BADSTATUS">
            <summary>
            This Error code is used when an exception was caught and the message 
            from that exception is being returned.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_LISTDELETED">
            <summary>
            This code indicates that an invalid list id was used.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_XIMESSAGEFROMTEXT">
            <summary>
            This Error Code is used when an internal Xi Server fault has occurred.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.E_XIMESSAGEFROMEXCEPTION">
            <summary>
            This Error code is used when an exception was caught and the message 
            from that exception is being returned.
            This Error Code value is duplicated from Xi.Contract.Data.XiFault
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDHANDLE">
            <summary>
            MessageId: OPC_E_INVALIDHANDLE
            MessageText:
            An invalid handle was passed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BADTYPE">
            <summary>
            MessageId: OPC_E_BADTYPE
            MessageText:
            The server cannot convert between the passed or requested data type and the canonical type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_PUBLIC">
            <summary>
            MessageId: OPC_E_PUBLIC
            MessageText:
            The requested operation cannot be done on a public group.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BADRIGHTS">
            <summary>
            MessageId: OPC_E_BADRIGHTS
            MessageText:
            The item's AccessRights do not allow the operation.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNITEMID">
            <summary>
            MessageId: OPC_E_UNKNOWNITEMID
            MessageText:
            The item definition does not exist within the servers address space.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDITEMID">
            <summary>
            MessageId: OPC_E_INVALIDITEMID
            MessageText:
            The item definition does not conform to the server's syntax.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDFILTER">
            <summary>
            MessageId: OPC_E_INVALIDFILTER
            MessageText:
            The filter string is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNPATH">
            <summary>
            MessageId: OPC_E_UNKNOWNPATH
            MessageText:
            The item's access path is not known to the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_RANGE">
            <summary>
            MessageId: OPC_E_RANGE
            MessageText:
            The value passed to WRITE was out of range.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_DUPLICATE_NAME">
            <summary>
            MessageId: OPC_E_DUPLICATE_NAME
            MessageText:
            A group with a duplicate name already exists in the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_UNSUPPORTEDRATE">
            <summary>
            MessageId: OPC_S_UNSUPPORTEDRATE
            MessageText:
            The server does not support the requested rate, but will use the closest available.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_CLAMP">
            <summary>
            MessageId: OPC_S_CLAMP
            MessageText:
            A value passed to WRITE was accepted, but was clamped.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INUSE">
            <summary>
            MessageId: OPC_S_INUSE
            MessageText:
            The operation  cannot be completed because the object still has references that exist.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDCONFIGFILE">
            <summary>
            MessageId: OPC_E_INVALIDCONFIGFILE
            MessageText:
            The server's configuration file is an invalid format.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOTFOUND">
            <summary>
            MessageId: OPC_E_NOTFOUND
            MessageText:
            The server could not locate the requested object.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALID_PID">
            <summary>
            MessageId: OPC_E_INVALID_PID
            MessageText:
            The server does not recognise the passed property ID.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_MAXEXCEEDED">
            <summary>
            MessageId: OPC_E_MAXEXCEEDED
            MessageText:
             The maximum number of values requested exceeds the server's limit.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_NODATA">
            <summary>
            MessageId: OPC_S_NODATA
            MessageText:
             There is no data within the specified parameters.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_MOREDATA">
            <summary>
            MessageId: OPC_S_MOREDATA
            MessageText:
             There is more data satisfying the query than was returned.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDAGGREGATE">
            <summary>
            MessageId: OPC_E_INVALIDAGGREGATE
            MessageText:
             The aggregate requested is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_CURRENTVALUE">
            <summary>
            MessageId: OPC_S_CURRENTVALUE
            MessageText:
             The server only returns current values for the requested item attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_EXTRADATA">
            <summary>
            MessageId: OPC_S_EXTRADATA
            MessageText:
             Additional data satisfying the query was found.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_W_NOFILTER">
            <summary>
            MessageId: OPC_W_NOFILTER
            MessageText:
             The server does not support this filter.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_UNKNOWNATTRID">
            <summary>
            MessageId: OPC_E_UNKNOWNATTRID
            MessageText:
             The server does not support this attribute.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOT_AVAIL">
            <summary>
            MessageId: OPC_E_NOT_AVAIL
            MessageText:
             The requested aggregate is not available for the specified item.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDDATATYPE">
            <summary>
            MessageId: OPC_E_INVALIDDATATYPE
            MessageText:
             The supplied value for the attribute is not a correct data type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_DATAEXISTS">
            <summary>
            MessageId: OPC_E_DATAEXISTS
            MessageText:
             Unable to insert - data already present.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDATTRID">
            <summary>
            MessageId: OPC_E_INVALIDATTRID
            MessageText:
             The supplied attribute ID is not valid.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NODATAEXISTS">
            <summary>
            MessageId: OPC_E_NODATAEXISTS
            MessageText:
             The server has no value for the specified time and item ID.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INSERTED">
            <summary>
            MessageId: OPC_S_INSERTED
            MessageText:
             The requested insert occurred.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_REPLACED">
            <summary>
            MessageId: OPC_S_REPLACED
            MessageText:
             The requested replace occurred.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_ALREADYACKED">
            <summary>
            MessageId: OPC_S_ALREADYACKED
            MessageText:
             The condition has already been acknowleged
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INVALIDBUFFERTIME">
            <summary>
            MessageId: OPC_S_INVALIDBUFFERTIME
            MessageText:
             The buffer time parameter was invalid
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_S_INVALIDMAXSIZE">
            <summary>
            MessageId: OPC_S_INVALIDMAXSIZE
            MessageText:
             The max size parameter was invalid
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDBRANCHNAME">
            <summary>
            MessageId: OPC_E_INVALIDBRANCHNAME
            MessageText:
             The string was not recognized as an area name
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_INVALIDTIME">
            <summary>
            MessageId: OPC_E_INVALIDTIME
            MessageText:
             The time does not match the latest active time
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_BUSY">
            <summary>
            MessageId: OPC_E_BUSY
            MessageText:
             A refresh is currently in progress
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiFaultCodes.OPC_E_NOINFO">
            <summary>
            MessageId: OPC_E_NOINFO
            MessageText:
             Information is not available
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.StartingObjectFilterValues">
            <summary>
            This enumeration defines the valid values for the StartingObjectAttributes 
            filter operand.  All values for this operand are passed in FilterCriterion as 
            integers.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StartingObjectFilterValues.StartingObjectOnly">
            <summary>
            A valid FilterOperand.StartingObjectAttributes value.
            This value is used to specify that the server is to return 
            ObjectAttributes only for the object identified by the starting 
            path.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StartingObjectFilterValues.AllObjects">
            <summary>
            A valid FilterOperand.StartingObjectAttributes value.
            This value is used to specify that the server is to return 
            ObjectAttributes for the object identified by the starting 
            path AND for the objects found below it.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.StandardListType">
            <summary>
            This enumeration specifies the standard types of lists.
            The enumerated values between 0 and 4095 inclusive are reserved 
            for standard types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.DataList">
            <summary>
            The type of list that contains data objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.DataJournalList">
            <summary>
            The type of list that contains historical data objects.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.EventList">
            <summary>
            The type of list that contains alarms and events.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.StandardListType.EventJournalList">
            <summary>
            The type of list that contains historical alarms and events.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperandNames">
            <summary>
            A string that represents the name of operand of a single filter criterion.  
            All values are case independent and should be up-shifted or down-shifted by 
            the server when used in comparisons.. They are defined here in camel case 
            for read-ability in displays.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AccessRight">
            <summary>
            <para>The access rights of an object.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.Read 
            and FilterOperandValues.Write. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.BranchOrLeaf">
            <summary>
            <para>The default behavior for filtering is to select both branches 
            and leaves. This filter operand allows the client to select one 
            or the other. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.Branch 
            and FilterOperandValues.Leaf. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DataType">
            <summary>
            <para>The name of the data type.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are constructed by using the ToString() method 
            for the TypeId of the data type.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Name">
            <summary>
            <para>The name of the object.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings.  Servers may optionally support 
            the use of the '?' character to represent any single character 
            and the '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.StartingObjectAttributes">
            <summary>
            <para>An operand with an integer value that specifies whether the server 
            is to return ObjectAttributes only for the object identified by the 
            starting path or for it plus the objects found below it.  The default 
            behavior when this filter operand is omitted is to return ObjectAttributes 
            only for the objects found below the object identified by the starting path.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are the integer representations 
            of the StartingObjectFilterValues enumeration.</para>
            <para>For example, (int)StartingObjectFilterValues.AllObjects
            is used to return ObjectAttributes for the starting object and all 
            objects below it. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AlarmState">
            <summary>
            <para>The alarm state of an alarm message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values are defined by the AlarmState enumeration.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Area">
            <summary>
            <para>The area of an event message.</para> 
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values for this operand are objects whose role is 
            ObjectRole.AreaRoleId. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventCategory">
            <summary>
            <para>The category of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are the categoryIds of the 
            categories defined by the EventCategoryConfigurations Mib element. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventConditionName">
            <summary>
            <para>The string representation of the InstanceId of an Event Condition 
            of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings generated using the InstanceId ToString() 
            method.  Servers may optionally support the use of the '?' character 
            to represent any single character and the '*' to represent multiple 
            characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventPriority">
            <summary>
            <para>The priority of an event message.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are integer values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventSourceId">
            <summary>
            <para>The string representation of the InstanceId of an Event Source 
            of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings generated using the InstanceId ToString() 
            method.  Servers may optionally support the use of the '?' character 
            to represent any single character and the '*' to represent multiple 
            characters in the LocalId property of the InstanceId.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EventType">
            <summary>
            <para>The type of an event message.</para> 
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values for this operand are defined by the 
            EventType enumeration. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MultiplexedAlarmContainer">
            <summary>
            <para>The name of a grouped or eclipsed alarm of an event message.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid names are strings.  Servers may optionally support 
            the use of the '?' character to represent any single character 
            and the '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OperatorName">
            <summary>
            <para>The operator name of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OccurrenceId">
            <summary>
            <para>The occurrence id of an event message.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OccurrenceTime">
            <summary>
            <para>The occurrence time of an event.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.TextMessage">
            <summary>
            <para>The text message of an event message.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.TimeLastActive">
            <summary>
            <para>The last active time of an alarm.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.AbsoluteDeadband">
            <summary>
            <para>The absolute deadband for a floating point value.  If a value has changed by 
            this absolute amount it is considered to have changed for subscription purposes, and 
            will be returned in a poll response or in a callback.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are double values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.PercentDeadband">
            <summary>
            <para>The percent deadband for a floating point value.  If a value has changed by 
            this percent it is considered to have changed for subscription purposes, and will 
            be returned in a poll response or in a callback.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are double values. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Archiving">
            <summary>
            <para>The flag that indicates, when TRUE, that a data journal is 
            collecting history a value. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The value of this operand is a boolean value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DataObjectId">
            <summary>
            <para>The id of the data object within the server that generated a 
            historical value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.DerivingEquation">
            <summary>
            <para>The equation used to derive a value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.EngineeringUnits">
            <summary>
            <para>The engineering units of a value. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ExceptionDeviation">
            <summary>
            <para>The minimum change in a data value that causes the value of a data 
            object to be recorded by the data journal. The ExceptionDeviationType 
            indicates whether the change is calcuated using absolute value, percent of span, 
            or percent of value.  </para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are doubles.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ExceptionDeviationType">
            <summary>
            <para>Indicates whether ExceptionDeviation is expressed in absolute value, 
            percent of span, or percent of value.  </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are FilterOperandValues.AbsoluteValue, 
            FilterOperandValues.PercentOfSpan, and FilterOperandValues.PercentOfValue. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MaxTimeInterval">
            <summary>
            <para>The maximum time interval between entries of a historical value. </para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are TimeSpans.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MaxValue">
            <summary>
            <para>The highest valid value for a data object (its top of span).</para>
            <para>All operators defined by the FilterOperator class are valid, except for 
            "GTE" and "GT".</para>
            <para>The valid values for this operand are dependent on the type of the value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.MinValue">
            <summary>
            <para>The highest valid value for a data object (its bottom of span).</para>
            <para>All operators defined by the FilterOperator class are valid, except for 
            "LTE" and "LT".</para>
            <para>The valid values for this operand are dependent on the type of the value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.NormalMaximum">
            <summary>
            <para>The upper limit for the normal maximum of a historical value.</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are the string respresentations of the data object value.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.NormalMinimum">
            <summary>
            <para>The lower limit for the normal minimum of a historical value.</para>
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>Valid values are the string respresentations of the data object value.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.OpcHdaTimestampExpression">
            <summary>
            <para>The timestamp of a value represented by an expression.</para>  
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The valid values for this operand are defined by the OPC HDA 
            specification. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerMachineName">
            <summary>
            <para>The name or IP address of the machine which the server that 
            generated a historical data value runs.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerName">
            <summary>
            <para>The name the server that generated a historical data value runs.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values are strings.  Servers may optionally support the 
            use of the '?' character to represent any single character and the 
            '*' to represent multiple characters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.ServerType">
            <summary>
            <para>The type of server that generated a historical value.</para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>Valid values include the ToString("G") values for the ServerType 
            enumeration.  </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Stepped">
            <summary>
            <para>The flag that indicates, when TRUE, that a data journal value 
            is stepped. When FALSE, it is interpolated. </para>
            <para>The only valid FilterOperator is "EQ" (equals).</para>
            <para>The value of this operand is a boolean value. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperandNames.Timestamp">
            <summary>
            <para>The timestamp of a value in DateTime format.</para>  
            <para>All operators defined by the FilterOperator class are valid.</para>
            <para>The valid values for this operand are DateTime values. </para>
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.JournalDataSampleTypes">
            <summary>
            Standard sample types for historical data
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.RawDataSamples">
            <summary>
            This is the Calculation LocalId for Raw Data Reads.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.AtTimeDataSamples">
            <summary>
            This is the Calculation LocalId for Specific Times.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.ChangedDataSamples">
            <summary>
            This is the Calculation LocalId for Changed Samples.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.JournalDataSampleTypes.DataSampleTypeUndefined">
            <summary>
            Values equal to or greater than this value for Calculation LocalId are undefined.
            They are reserved to indicated that the Calculation LocalId has not beeen set.
            value should be considered reserved.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType">
            <summary>
            The HistoricalValueType is a 3-bit property that describes the 
            the historical data value associated with the Status Code.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalValueTypeMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the historical data value type.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalValueTypeShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the historical data value type bits into the 
            low bits or into the Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NotUsed">
            <summary>
            The historical value type is not used. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.RawValue">
            <summary>
            The value is the raw value.  If the value is a raw value with more 
            than one raw value at the same timestamp, then the ExtraValue 
            enumeration should be used instead of this one.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.RawValueBits">
            <summary>
            The value is the raw value.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NoValue">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.NoValueBits">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.ExtraValue">
            <summary>
            The value is a raw value, and more than one raw value exists at same timestamp. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.ExtraValueBits">
            <summary>
            More than one value exists at same timestamp. 
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.LostValue">
            <summary>
            Collection started / stopped / lost.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.LostValueBits">
            <summary>
            Collection started / stopped / lost.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.InterpolatedValue">
            <summary>
            The value has been interpolated.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.InterpolatedValueBits">
            <summary>
            The value has been interpolated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.CalculatedValue">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.CalculatedValueBits">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.PartialCalculatedValue">
            <summary>
            The value is a calculated value for an incomplete interval.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.PartialCalculatedValueBits">
            <summary>
            The value is a calculated value for an incomplete interval.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalNoBoundingFlg">
            <summary>
            Xi Status Code Flag bit for historical data with no upper or lower bounding values. 
            This flag is not part of the HistoricalValueType bits, but is the bit just before them 
            (from the right) in the Xi Status code. Its definition is included in this class because 
            of its relationship to the other historical bits.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiStatusCodeHistoricalValueType.HistoricalConversionErrorFlg">
            <summary>
            Flag bit for Historical Conversion Error. 
            This flag is not part of the HistoricalValueType bits, but is the second bit just before them 
            (from the right) in the Xi Status code. Its definition is included in this class because 
            of its relationship to the other historical bits.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.XiNamespace">
            <summary>
            This class defines the standard namespaces defined for the Xi specification.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.Xi">
            <summary>
            The Xi namespace. The string for the Xi Namespace is null because 
            the .NET namespace is embedded in the type id when calling the 
            TypeId.ToString() method to create a TypeId string.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCDA205">
            <summary>
            The OPC DA 2.05 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCDA30">
            <summary>
            The OPC DA 3.0 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCAEAttribute">
            <summary>
            The namespace for OPC Alarms and Events Attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCAECategory">
            <summary>
            The namespace for OPC Alarms and Events Categories.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCHDA">
            <summary>
            The OPC HDA 1.2 namespace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiNamespace.OPCUA10">
            <summary>
            The OPC UA 1.0 namespace.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.FilterOperator">
            <summary>
            This enumeration defines the standard operators that can be used in 
            filters to compare an operand with a value.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.Equal">
            <summary>
            Equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.LessThanOrEqual">
            <summary>
            Less than or equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.GreaterThanOrEqual">
            <summary>
            Greater than or equals.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.FilterOperator.NotEqual">
            <summary>
            Not equals.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.FilterOperator.ToString(System.UInt32)">
            <summary>
            This method converts a standard filter operator to a string.
            </summary>
            <param name="filterOperator">
            The filter operator to convert.
            </param>
            <returns>The string representation of the filter operator.</returns>
        </member>
        <member name="T:Xi.Contracts.Constants.XiSchemaType">
            <summary>
            This enumeration specifies the standard Xi schema types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.Xi">
            <summary>
            <para>This SchemaType indicates that the type is defined by the 
            Xi Interface Contracts or by the .NET CLS, and that LocalId member 
            of the Xi TypeId is the string representation of the type using the 
            typeof() method. For this schema type, the Namespace element of the 
            TypeId is always null, since the namespace is incorporated into the 
            .NET type name.  </para> 
            <para>E.g. "typeof(double).ToString()" results in a TypeId as follows:</para>
            <para>	SchemaType = null</para>
            <para>	Namespace = null</para>
            <para>	LocalId = "System.Double"</para>
            <para>The string for the Xi SchemaType is null to 
            allow the TypeId.ToString() method to create a simple 
            TypeId string.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.LocalServer">
            <summary>
            This SchemaType indicates that the type is defined by the 
            local server and that type of the LocalId member of the TypeId 
            is one of the standard CLS scalar types (e.g. int, string). 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.Xml">
            <summary>
            This SchemaType indicates that the type is defined using 
            a W3C XML Schema.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.ASN1">
            <summary>
            This SchemaType indicates that the type is defined using 
            the CCITT X.680 Abstract Syntax Notation One (ASN.1). 
            ASN.1 is used for defining data types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.EDDL">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            using the IEC 61804 EDDL language. The EDDL SchemaType 
            is used to define object types for device parameters 
            and blocks. Example parameters include Setpoint and 
            ProcessVariable, and example blocks include PID, AI, 
            and AO blocks.</para>
            <para>The EDDL SchemaType is also used to define the data 
            types for device blocks and parameters.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.FmsOdIndex">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            using the IEC 61158 FMS Object Dictionary (FMS OD). The 
            FMS OD SchemaType is used to define data types for device 
            data, including function block data, network management 
            data, and system management data.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.FFProfileNumber">
            <summary>
            <para>This SchemaType indicates that the type is defined 
            by the Fieldbus Foundation using a profile number.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.XiSchemaType.OPC">
            <summary>
            This SchemaType indicates that the LocalId of the TypeId 
            identifies the semantic type of an OPC element, such as a 
            DA Property, AE Attribute, AE Condition, or HDA Attribute. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ListElementOptions">
            <summary>
            <para>List Element Options provides a set of flags that may be set as part 
            of adding elements to an Xi list. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ListElementOptions.Default">
            <summary>
            No options are set for the List Element.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ListElementOptions.AccessAsString">
            <summary>
            Override the default type of a data object list element, 
            and access it as a string type.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ContextOptions">
            <summary>
            <para>Context Options provides a set of flags that may be set as part 
            of the IResourceManagement.Initiate() method to allow for debug/tracing 
            and other options to be set for the client's context with the server.
            The implementation of ContextOptions is vendor-specific.</para>
            <para>Values below 0xFFFFFF (the low order 24-bits) are reserved. 
            Vendors may use the high order 8 bits.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.NoOptions">
            <summary>
            No options are set for the Context.  
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableEnhancedErrorInfo">
            <summary>
            ErrorInfo objects with non-empty ErrorMessages are enabled 
            for the Context.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableMethodTrace">
            <summary>
            Enable tracing of Xi Server method invocations for 
            this context.  When enabled, all calls to Xi Contract
            methods are logged by the server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableDetailTrace">
            <summary>
            Enable tracing of internal method invocations. 
            Implementation is server dependent.  It is 
            intended to provide additional details to the
            method invocations logged by EnableMethodTrace.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableErrorLogging">
            <summary>
            Enable the logging of error conditions that occur while
            the server is running.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnablePerfCounters">
            <summary>
            Performance counters are enabled for the Context.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.AllowDifferentClientIpAddress">
            <summary>
            Allows a ReInitiate() request to be issued from a 
            different IpAddress than that used by the previously 
            connected WCF client connection.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.UseServerOptions">
            <summary>
            <para>Requests the server to use context options selected or 
            configured for the server.  How these options are selected by or 
            configured is server-specific.</para>
            <para>These options may include any of the defined context options 
            whose values are less than this option and may also include additional 
            server-specific options.  Selection of this option causes all of the 
            included context options to be used, even if they were not individually
            selected.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableDataAccess">
            <summary>
            Selectively enable access to the server for data.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableJournalDataAccess">
            <summary>
            Connect to the server for Historical Data Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ContextOptions.EnableJournalAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Historical Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then all types of access are enabled. 
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ServerType">
            <summary>
            This class defines standard server types.  A server may 
            support one or more server types.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_ServerDiscoveryServer">
            <summary>
            The server is a server discovery server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_DataServer">
            <summary>
            The server is a native Xi data server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_EventServer">
            <summary>
            The server is a native Xi event server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_DataJournalServer">
            <summary>
            The server is a native Xi data journal server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_EventJournalServer">
            <summary>
            The server is a native Xi event journal server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_DA205_Wrapper">
            <summary>
            The server wraps an OPC DA 2.05 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_AE11_Wrapper">
            <summary>
            The server wraps an OPC Alarms and Events 1.1 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_HDA12_Wrapper">
            <summary>
            The server wraps an OPC HDA 1.2 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_DA30_Wrapper">
            <summary>
            The server wraps an OPC DA 3.0 server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_XMLDA_Wrapper">
            <summary>
            The server wraps an OPC XMLDA server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_DA_Wrapper">
            <summary>
            The server wraps an OPC UA Data Access server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_AC_Wrapper">
            <summary>
            The server wraps an OPC UA Alarms and Conditions server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.OPC_UA_HDA_Wrapper">
            <summary>
            The server wraps an OPC UA Historical Data Access server.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ServerType.Xi_BaseServer">
            <summary>
            The base Xi server that wraps one or more OPC servers.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Constants.ServerType.ToString(System.UInt32)">
            <summary>
            This method constructs a string that contains each of the server 
            types specified by the serverTypes parameter.
            </summary>
            <param name="serverTypes">
            A bit-mask that identifies each of the server types.
            </param>
            <returns>
            The string representation of the server types.
            </returns>
        </member>
        <member name="M:Xi.Contracts.Constants.ServerType.ConvertToContextOptions(System.UInt32)">
            <summary>
            This method returns the context options for the Server Type.
            </summary>
            <param name="serverType">The server type to be converted to the corresponding ContextOptions</param>
            <returns></returns>
        </member>
        <member name="T:Xi.Contracts.Constants.AlarmStateChangeCodes">
            <summary>
            This class holds a set of constants used to inform a client 
            as to the cause / reason for the event message to be sent.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Active">
            <summary>
            The Active State has changed
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Acknowledge">
            <summary>
            The Acknowledge State has changed. 
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Disable">
            <summary>
            The Disable State has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Priority">
            <summary>
            The Priority has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Subcondition">
            <summary>
            The Subcondition has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.Message">
            <summary>
            The Message has changed.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.AlarmStateChangeCodes.RequestedField">
            <summary>
            One or more of the Requested Fields has changed.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.PnrpMeshNames">
            <summary>
            This class defines standard mesh names used to register Xi Servers and 
            Xi Discovery Servers
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.PnrpMeshNames.XiDiscoveryServerMesh">
            <summary>
            <para>The Peer TypeId Resolution Protocol (PNRP) standard peer name for the 
            mesh of Xi Directory Services.  The IServerDiscovery.DiscoverServers() 
            method supported by Xi Directory Services is used by clients to access 
            a list Xi Servers.</para>
            <para>Xi Directory Services maintain a list of Xi servers that it 
            discovers using PNRP XiDiscoveryServerMesh and/or other means. </para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.PnrpMeshNames.XiServerMesh">
            <summary>
            The standard peer name for the mesh of Xi Servers.  This mesh is used 
            by Xi Directory Services to discover Xi servers that are capable of 
            registering themselves using the Peer TypeId Resolution Protocol (PNRP).
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.SortType">
            <summary>
            This enumeration specifies how a list is sorted.
            The sort keys are defined by the list attributes.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.NotSorted">
            <summary>
            The list is not sorted.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.Ascending">
            <summary>
            The list is sorted in ascending order.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.SortType.Descending">
            <summary>
            The list is sorted in descending order.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Constants.ObjectRoleIds">
            <summary>
            Object Roles are identified using TypeIds. This allows different 
            organizations to define ObjectRoles.  This class defines standard 
            ObjectRoles.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.AreaRootRoleId">
            <summary>
            <para>The TypeId for the object that represents the 
            plant area root. Plant area roots may themselves be 
            plant areas.</para> 
            <para>Each system is allowed to have only one plant area 
            root to allow clients to easily discover the areas of a 
            system.  However, plants may have multiple systems, each 
            with its own plant area root.  It is required that the  
            area root for a system is located directly below the 
            "Root" of the system.  </para>
            <para>Plant areas can always be found directly below the 
            area root object or directly under another plant area. 
            Therefore, the path of plant areas always contain the name 
            of the area root followed by one or more area names.</para>
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.AreaRoleId">
            <summary>
            The TypeId for objects that represent plant areas.  The 
            description of AreaRoot describes the organization of plant 
            areas beneath the Area Root.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.EventSourceRoleId">
            <summary>
            The TypeId for objects that represent event sources.  Event  
            soruces can always be found directly below a plant area.  It  
            is also possible that they can be found below other objects 
            in the system, but there must be at least one path to them in 
            which they are a direct child of an area.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcBranchRoleId">
            <summary>
            The TypeId for objects that represent OPC DA Server Branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcLeafRoleId">
            <summary>
            The TypeId for objects that represent OPC DA Server Leaves.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.OpcPropertyRoleId">
            <summary>
            The TypeId for objects that represent Opc Server Properties.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.HdaBranchRoleId">
            <summary>
            The TypeId for objects that represent OPC HDA Server Branches.
            </summary>
        </member>
        <member name="F:Xi.Contracts.Constants.ObjectRoleIds.HdaLeafRoleId">
            <summary>
            The TypeId for objects that represent OPC HDA Server Leaves.
            </summary>
        </member>
    </members>
</doc>
