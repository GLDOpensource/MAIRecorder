<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Client.Base.API</name>
    </assembly>
    <members>
        <member name="T:Xi.Client.Base.API.XiClientBaseException">
            <summary>
            This class defines a ClientBase specific exception
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseException.#ctor">
            <summary>
            This constructor creates an empty XiClientBaseException
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseException.#ctor(System.String)">
            <summary>
            This constructor creates an XiClientBaseException with a message.
            </summary>
            <param name="message">The message for the XiClientBaseException.</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor creates an XiClientBaseException with the serialization info and the source 
            and destination context.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The source and destination context</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor creates an XiClientBaseException with a message and an inner exception.
            </summary>
            <param name="message">The message for the XiClientBaseException</param>
            <param name="innerException">The inner exception for the XiClientBaseException</param>
        </member>
        <member name="T:Xi.Client.Base.API.XiClientBaseCancelException">
            <summary>
            This class defines a ClientBase specific exception associated with the cancellation 
            of a user operation, such as cancelling the entering of a user name and password.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseCancelException.#ctor">
            <summary>
            This constructor creates an empty XiClientBaseCancelException
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseCancelException.#ctor(System.String)">
            <summary>
            This constructor creates an XiClientBaseCancelException with a message.
            </summary>
            <param name="message">The message for the XiClientBaseCancelException.</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseCancelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor creates an XiClientBaseCancelException with the serialization info and the source 
            and destination context.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The source and destination context</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiClientBaseCancelException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor creates an XiClientBaseCancelException with a message and an inner exception.
            </summary>
            <param name="message">The message for the XiClientBaseException</param>
            <param name="innerException">The inner exception for the XiClientBaseException</param>
        </member>
        <member name="T:Xi.Client.Base.API.XiDataNotification">
            <summary>
            This delegate is implemented to receive notification of data value updates.
            </summary>
            <param name="sender">The calling object.</param>
            <param name="notificationData">The data updates being reported.</param>
        </member>
        <member name="T:Xi.Client.Base.API.XiEventsNotification">
            <summary>
            This delegate is implemented to receive notification new events and alarm state changes.
            </summary>
            <param name="sender">The calling object.</param>
            <param name="notificationData">The events and alarms being reported.</param>
        </member>
        <member name="T:Xi.Client.Base.API.XiDataNotificationData">
            <summary>
            This class defines the data being reported by XiDataNotification events. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataNotificationData.#ctor(Xi.Client.Base.API.IXiDataList)">
            <summary>
            The constructor that creates an XiDataNotificationData object 
            for an XiDataList object.
            </summary>
            <param name="dataList">The data list.</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataNotificationData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets base enumerator for this class
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataNotificationData.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiDataObject}#GetEnumerator">
            <summary>
            The enumerator that returns the enumerator for list of data objects.
            </summary>
            <returns>Returns the enumerator for list of data objects</returns>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataNotificationData._dataList">
            <summary>
            The private representation of the DataList property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataNotificationData._dataObjects">
            <summary>
            The list of data objects being reported.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataNotificationData.Add(Xi.Client.Base.API.IXiDataObject)">
            <summary>
            This method adds a data object to the list being reported.
            </summary>
            <param name="dataObjectToAdd">The data object to add.</param>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataNotificationData.Count">
            <summary>
            The number of data objects being reported.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataNotificationData.DataList">
            <summary>
            The Data List that contains the data object values being reported.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataNotificationData.Item(System.Int32)">
            <summary>
            The indexer that returns a data object identified by a numeric index.
            </summary>
            <param name="idx">The index of the data object</param>
            <returns>The indexed data object</returns>
        </member>
        <member name="T:Xi.Client.Base.API.XiEventsNotificationData">
            <summary>
            This class defines the data being reported by XiEventsNotification events. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventsNotificationData.#ctor(Xi.Client.Base.API.IXiEventList)">
            <summary>
            This constructor creates an empty list of event list elements for the specified Event List.
            Each event list element contains one event message.
            </summary>
            <param name="eventList">The Event List for to which the event list elements belong. </param>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventsNotificationData.#ctor(Xi.Client.Base.API.IXiEventList,System.Collections.Generic.List{Xi.Client.Base.API.IXiEventListElement})">
            <summary>
            This constructor creates an XiEventsNotificationData with a list of event list elements for the specified Event List.
            </summary>
            <param name="eventList">The Event List for to which the event list elements belong. </param>
            <param name="eventListElements">The event list elements for this notification. </param>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventsNotificationData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets base enumerator for this class
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventsNotificationData.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiEventListElement}#GetEnumerator">
            <summary>
            The enumerator that returns the enumerator for list of event list elements.
            </summary>
            <returns>Returns the enumerator for list of event list elements</returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventsNotificationData.Add(Xi.Client.Base.API.IXiEventListElement)">
            <summary>
            This method adds an event list element to this notification.
            </summary>
            <param name="eventListElement">The event list element to add</param>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventsNotificationData._eventList">
            <summary>
            The private representation of the EventList property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventsNotificationData._eventListElements">
            <summary>
            The list of event list elements being reported by this notification
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventsNotificationData.EventList">
            <summary>
            The event list containing the event list elements that are being reported by this notification
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventsNotificationData.Count">
            <summary>
            The number of event list elements being reported.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventsNotificationData.Item(System.Int32)">
            <summary>
            The indexer that returns a data object identified by a numeric index.
            </summary>
            <param name="idx">The index of the event list element</param>
            <returns>The indexed event list element</returns>
        </member>
        <member name="T:Xi.Client.Base.API.IXiListElementBase">
            <summary>
            This interface is the base interface for the elements of IXiLists.  
            Every IXiList is composed of a list of elements that are subclasses of this base type.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListElementBase.UpdateCount">
            <summary>
            This property defines the number of times the list element has been updated, 
            such as through a read, callback, or poll.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListElementBase.Tag">
            <summary>
            The property defines an object that the client application can use to 
            associate this list element with an object of its choice.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListElementBase.ResultCodeTransaction">
            <summary>
            This property is the result code for the last transaction (request/response operation) 
            on this list element.  
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiDataObjectBase">
            <summary>
            This interface is the base interface for data objects that are elements of runtime 
            and historical data lists.  
            Runtime and historical data lists are composed of a list of data objects defined by 
            subclasses of this base type.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataObjectBase.PrepForRemove">
            <summary>
            This method is used to set the state of the data object to allow it to be 
            removed from the server. If the data object has not yet been added to the 
            server, This method is used to set the state of the data object to disposable.
            </summary>
            <returns>Returns true if the state of data object was successfully set 
            to RemoveableFromServer or Disposable.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataObjectBase.ResultCodeAsHex(System.UInt32)">
            <summary>
            This method converts the ResultCode to a hex string for display purposes.
            </summary>
            <param name="resultCode">
            The result code to be converted to hex.
            </param>
            <returns>The hex code string.</returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.InstanceId">
            <summary>
            This property is the InstanceId of the data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.DataTypeId">
            <summary>
            This property contains the data type for this data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.ClientAlias">
            <summary>
            This property contains the ClientBase-assigned handle for this data object. 
            The ClientBase assigns a random number for this handle.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.ServerAlias">
            <summary>
            This property contains the server-assigned handle for this data object. 
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.IsUsable">
            <summary>
            This property indicates, when TRUE, that the data object is in a 
            useable state, indicating that it has been added to the server 
            and is not pending removal from the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.Enabled">
            <summary>
            This property indicates, when TRUE, that the data object is enabled for access 
            via callbacks or polling. 
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.IsReadable">
            <summary>
            This property indicates, when TRUE, that the data object can be read. 
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObjectBase.IsWritable">
            <summary>
            This property indicates, when TRUE, that the data object can be written. 
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiDataObject">
            <summary>
            This interface is the base interface for data objects that are elements of runtime 
            data lists as defined by the IXiDataList interface.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataObject.PrepWriteValue(Xi.Client.Base.API.XiDataValue)">
            <summary>
            This method is used to set PendingWriteValue to a value to be written.  
            If the data object is not writable, this method sets PendingWriteValue 
            to null. After preparing one or more data objects to be written, the 
            client application issues the data list CommitDataObjectWrites() method 
            to write them to the server in a single call.
            </summary>
            <param name="dataValue">The data value to be written.</param>
            <returns>Returns TRUE if the data object is writable, otherwise FALSE.</returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObject.DataValue">
            <summary>
            This property contains the runtime data value for the data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObject.PendingWriteValue">
            <summary>
            This property contains the data value that is to be written to the data object.
            Prior to writing a value to the server, the client application sets the 
            PendingWriteValue for one or more data objects using the PrepWriteValue() method, 
            and then issues the data list CommitDataObjectWrites() method to write them 
            to the server in a single call.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObject.ResultCodeWrite">
            <summary>
            This property contains the result code associated with writing the PendingWriteValue. 
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiDataObject.ResultCodeReceivedValue">
            <summary>
            This property is the result code for the last received value on this list element,
            obtained in a read or poll response or in a callback.  It is set to 
            XiFaultCodes.E_INVALIDVALUE_BADSTATUS if the status code of the value indicates 
            the value is bad.
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiHistoricalDataObject">
            <summary>
            This interface defines access to a historical data object.  Each historical 
            data object contains a list of historical values and a list of 
            historical data properties.  IEnumerable interfaces are provided to 
            allow easy iteration of the historical values.  
            Each historical data object may have multiple lists of values obtained 
            via different calculations. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiHistoricalDataObject.NewListOfHistoricalDataItemValues(Xi.Contracts.Data.TypeId)">
            <summary>
            This method is used to create a new list of historical values for this historical
            data object.  The values for this list are populated using historical read 
            methods defined by the IXIDataJournalList interface. 
            </summary>
            <param name="calculationTypeId">The type of calculation to be used to create 
            the list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. This data object 
            may not have two value sets with the same CalculationTypeId.</param>
            <returns>Returns the newly created list of historical values.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiHistoricalDataObject.TryGetValue(System.UInt32,Xi.Client.Base.API.IXiHistoricalDataObjectValueSet@)">
            <summary>
            This method attempts to retrieve a set of historical values of a given 
            value list type for the historical data object.
            </summary>
            <param name="CalculationTypeLocalId">The type of calculation to be used to create 
            the list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. This data object 
            may not have two value sets with the same CalculationTypeId.</param>
            <param name="valueList">The retrieved set of historical values.</param>
            <returns>Returns TRUE if the attempt succeeded, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiHistoricalDataObject.ContainsKey(System.UInt32)">
            <summary>
            This method determines if this historical data object contains the specified list 
            of historical values.  Historical value lists are created using the 
            NewListOfHistoricalDataItemValues() method.
            </summary>
            <param name="CalculationTypeLocalId">The type of calculation to be used to create 
            the list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. This data object 
            may not have two value sets with the same CalculationTypeId.</param>
            <returns>Returns TRUE if this data object contains the specified list of historical 
            values, otherwise FALSE. </returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObject.PropertyValues">
            <summary>
            This properties contains the set of historical property values for the historical data object.
            Property values are obtained using the ReadJournalDataProperties() method defined by the 
            IXIDataJournalList interface.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObject.Count">
            <summary>
            This property indicates the number of historical values for the historical data object.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet">
            <summary>
            This interface defines access to a time-bounded set of historical data values for 
            a given historical data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.OwningHistoricalDataObject">
            <summary>
            This property contains a reference to the historical data object to 
            which this historical value set belongs.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.HistoricalValues">
            <summary>
            This property contains the list of historical values.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.CalculationTypeId">
            <summary>
            This property defines type of calculation to be used to create the list 
            of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. The OwningHistoricalDataObject 
            may not have two value sets with the same CalculationTypeId.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.CalculationTypeLocalId">
            <summary>
            The LocalId portion of the CalculationTypeId. Set to 0 if the LocalId is not a uint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.ResultCode">
            <summary>
            This property contains the Result Code associated with reading this value 
            set from the server. See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.StartTime">
            <summary>
            This property defines the starting time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.EndTime">
            <summary>
            This property defines the ending time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.Count">
            <summary>
            This property contains the number of values in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiHistoricalDataObjectValueSet.Tag">
            <summary>
            The property defines an object that the client application can use to 
            associate this value set with an object of its choice.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEventListElement">
            <summary>
            This interface defines access to elements of Xi Event Lists.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventListElement.EventMessage">
            <summary>
            This property contains the Event Message received from the server in an Event Notification.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventListElement.MessageKey">
            <summary>
            The unique message identifier constructed from fields of the Event Message by the ClientBase. The fields 
            used to construct the Message Key are specific to the EventType of the Event Message. For alarms, the message 
            key identifies the alarm itself, independent of its state, or the occurrence being reported.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEventMessageFieldValue">
            <summary>
            This interface defines access to Event Message fields that may be added to an Event Message.
            It is not used for fields that are defined as data members of the Event Message.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventMessageFieldValue.Name">
            <summary>
            This property contains the name of the Event Message field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventMessageFieldValue.Selected">
            <summary>
            This property indicates, when TRUE, that this field has been selected by the 
            client application to be returned in the Event Message.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventMessageFieldValue.DataTypeId">
            <summary>
            This property defines the data type of the field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventMessageFieldValue.Value">
            <summary>
            This property contains the value of the field.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiCategorySpecificFields">
            <summary>
            This class defines the list of category-specific fields that the client can request the server to add to event messages.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiCategorySpecificFields.#ctor(System.UInt32)">
            <summary>
            This constructor creates an empty (no fields) XiCategorySpecificFields instance for the specified category.
            </summary>
            <param name="categoryId"></param>
        </member>
        <member name="F:Xi.Client.Base.API.XiCategorySpecificFields._categoryId">
            <summary>
            The private representation of the CategoryId property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiCategorySpecificFields._optionalEventMsgFields">
            <summary>
            The private representation of the OptionalEventMsgFields property
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiCategorySpecificFields.CategoryId">
            <summary>
            This property identifies the category to which the event message fields belong.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiCategorySpecificFields.OptionalEventMsgFields">
            <summary>
            This property contains the server-specific fields supported for the specified category.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiEventMsgFieldDesc">
            <summary>
            This class is used to describe optional, server-specific event message fields supported by the server.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiEventMsgFieldDesc.#ctor(System.String,System.String,Xi.Contracts.Data.TypeId,Xi.Contracts.Data.TypeId)">
            <summary>
            This constructor creates an instance of the event message field.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field</param>
            <param name="objectTypeId">The object type of the field</param>
            <param name="dataTypeId">The data type of the field</param>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc.Description">
            <summary>
            The optional description of the field.  Null if unused.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc._name">
            <summary>
            The private representation of the Name property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc._description">
            <summary>
            The private representation of the Description property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc._objectTypeId">
            <summary>
            The private representation of the ObjectTypeId property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc._dataTypeId">
            <summary>
            The private representation of the DataTypeId property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiEventMsgFieldDesc._selected">
            <summary>
            The private representation of the Selected property
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventMsgFieldDesc.Name">
            <summary>
            The display name of the parameter, field, or property.  Names 
            are not permitted to contain the forward slash ('/') character.  
            This name is used as the FilterOperand in FilterCriterion.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventMsgFieldDesc.ObjectTypeId">
            <summary>
            The object type of the field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventMsgFieldDesc.DataTypeId">
            <summary>
            The data type of the field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiEventMsgFieldDesc.Selected">
            <summary>
            This property indicates, when TRUE, that the field has been selected to be returned in event messages.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiListBase">
            <summary>
            This interface is the base interface for all types of XiLists.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.AddListToEndpoint(Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            This method is used to add an XiList to an Xi Endpoint.
            </summary>
            <param name="xiEndpoint">The endpoint to which the list is to be added.</param>
            <returns>
            The result code for the operation.  See XiFaultCodes class for 
            standardized result codes. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.RemoveListFromEndpoint(Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            This method removes this list from the specified Xi Endpoint.
            </summary>
            <param name="xiEndpoint">The endpoint from which this list is to be removed.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.EnableListUpdating(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of an entire 
            list. When this method is called, the enabled state of the list is changed, 
            but the enabled state of the individual elements of the list is unchanged. </para>
            <para>When a list is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.</para>
            <para>Calling this method also causes the local copy of the list attributes to be 
            updated.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.</param>
            <returns>Returns TRUE if the list was successfully enabled or disabled.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the update rate, buffering rate, and/or 
            filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="updateRate">
            The new update rate of the list.  The server will negotiate this 
            rate to one that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the update rate is not to be updated.  
            </param>
            <param name="bufferingRate">
            The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the buffering rate is not to be updated.
            </param>
            <param name="filterSet">
            The new set of filters.  The server will negotiate these filters to those 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the filters are not to be updated.
            </param>
            <returns>
            The revised update rate, buffering rate, and filter set.  Attributes 
            that were not updated are set to null in this response.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.GetListAttributes">
            <summary>
            This method is used to retrieve the attributes of this list from the server.
            </summary>
            <returns>The attributes of this list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiListBase.TouchList">
            <summary>
            <para>This method is used to cause a list to be "touched".</para> 
            <para>For lists that contain data objects, this method causes 
            the server to update all data objects in the list that are currently 
            enabled (see the IXiDataList EnableListElementUpdating() method), mark them 
            as changed (even if their values did not change), and then return 
            them all to the client in the next callback or poll. </para>  
            <para>For lists that contain events, this method causes 
            the server to mark all alarms/event in the list as changed, 
            and then return them all to the client in the next callback.</para>
            </summary>
            <returns>
            The result code for the operation.  See XiFaultCodes class for 
            standardized result codes. 
            </returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.Context">
            <summary>
            This property provides the Xi Context to which this list belongs.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.ClientListId">
            <summary>
            This property is a handle by which this Xi List is known within 
            the client code.  This value is established by the ClientBase code.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.ServerListId">
            <summary>
            This property is  a handle by which this Xi List is known within 
            the server code.  This value is established by the server code.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.ListType">
            <summary>
            This property identifies the Standard Xi List Type of this list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.ListTypeAsString">
            <summary>
            Use this property to obtain the List Type as a string value.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.DataList">
            <summary>
            This property is the list of elements for Data Lists. 
            It is null if this is not a Data List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.DataJournalList">
            <summary>
            This property is the list of elements for Data Journal Lists (historical data lists). 
            It is null if this is not a Data Journal List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.EventList">
            <summary>
            This property is the list of elements for Event Lists. 
            It is null if this is not an Event List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.EventJournalList">
            <summary>
            This property is the list of elements for Event Journal Lists (historical data lists). 
            It is null if this is not a Event Journal List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.Count">
            <summary>
            This property indicates the number of elements in the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiListBase.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this list with an 
            object of its choosing.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiDataListBase">
            <summary>
            This interface is the base interface for all types of XiLists.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataListBase.CommitAddedElementsToServerList">
            <summary>
            This method requests the server to add elements to the list that have been added to the local ClientBase copy 
            of the list. For example, after using the AddNewDataObjectToList() method add a set of data objects to the local 
            ClientBase copy of the list, this method is called to add them to the server's copy of the list in a single call.
            <returns>The list of elements successfully added to the server list.</returns>
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataListBase.CommitAddedElementsToServerList(System.Collections.Generic.IEnumerable{Xi.Client.Base.API.IXiDataObjectBase}@)">
            <summary>
            This method requests the server to add elements to the list that have been added to the local ClientBase copy 
            of the list. For example, after using the AddNewDataObjectToList() method add a set of data objects to the local 
            ClientBase copy of the list, this method is called to add them to the server's copy of the list in a single call. 
            This method returns the list of data objects that failed to be added to the data list as an out parameter.
            </summary>
            <param name="addFailures">The list of elements that failed to be added to the server list.  The ResultCode element 
            of each entry in the list indicates the reason for failure.</param>
            <returns>The list of elements successfully added to the server list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataListBase.CommitRemoveableElements">
            <summary>
            <para>This method requests the server to remove elements from the list. The elements to be 
            removed are those that have been tagged for removal by the IXiValue PrepForRemove() method.  
            The PrepForRemove() is called individually on each list element to be removed, and followed 
            by the CommitRemoveableElements(). </para>
            <para>The CommitRemoveableElements() method loops through the list to find the 
            elements that have been prepared for removal and makes a single call to the server to 
            have them removed from the server's list.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataListBase.TouchDataObjects(System.Collections.Generic.List{Xi.Client.Base.API.IXiDataObjectBase})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state (see the EnableListElementUpdating() method) are not 
            affected by this method.  This method cannot be used with 
            event lists.</para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            </summary>
            <param name="listTValue">The data objects to touch.</param>
            <returns>
            The list of error codes for the data objects that could not be 
            touched.  See XiFaultCodes claass for standardized result codes. 
            Data objects that were successfully touched are not included in this 
            list.
            </returns>
        </member>
        <member name="T:Xi.Client.Base.API.IXiDataList">
            <summary>
            This interface defines access to Data Lists.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.AddNewDataObjectToList(Xi.Contracts.Data.InstanceId,System.Boolean,Xi.Contracts.Constants.ListElementOptions)">
            <summary>
            This method is used to create and add a new data object to a Data List.  The new data 
            object is created using its InstanceId.
            </summary>
            <param name="instanceId">The InstanceId of the data object to create and add.</param>
            <param name="bPrepOnly">
            <para>When a new element is added to the local Xi List, this parameter can be 
            set to FALSE to cause this element and any other locally added elements to be 
            immediately added to the Xi Server. </para>  
            <para> Because is far more efficient to add elements to a local Xi List with this 
            parameter set to TRUE, FALSE should be used cautiously. </para>
            <para>TRUE = the new Xi Value is prepared for adding to the server.</para>
            <para>FALSE = the new Xi Value along with any other prepared Xi Values are 
            added to the server in a single call to CommitAddedElementsToServerList().</para>
            </param>
            <param name="options">This parameter defines additional options for adding the data object to the list.</param>
            <returns>Returns the newly created data object.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.EnableListElementUpdating(System.Boolean,System.Collections.Generic.IEnumerable{Xi.Client.Base.API.IXiDataObject})">
            <summary>
            <para>This method is used to enable or disable updating of 
            individual elements of a list.  If the dataObjectsToEnableOrDisable parameter is 
            null, then all elements of the list are enabled/disabled.  This call 
            does not change the enabled state of the list itself.</para>
            <para>When an element of the list is disabled, the server excludes it 
            from participating in callbacks and polls. However, at the option of the 
            server, the server may continue updating its cache for the element.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.
            </param>
            <param name="dataObjectsToEnableOrDisable">The list of data objects to be 
            enabled or disabled.</param>
            <returns>The list of dataObjects that failed to be enabled. The ResultCodeTransaction member 
            of each returned data object indicates the reason for failure. Null is returned if there 
            were no failures.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.ReadData(System.Collections.Generic.List{Xi.Client.Base.API.IXiDataObject})">
            <summary>
            This method is used to read the values of one or more data objects in a list.  
            </summary>
            <param name="dataObjectsToRead">The list of data objects to read.  The values 
            are returned in the data objects.</param>
            <returns>The list of dataObjects that failed to be enabled. The ResultCodeReceivedValue member 
            of each returned data object indicates the reason for failure. Null is returned if there 
            were no failures.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.CommitDataObjectWrites">
            <summary>
            <para>Writing data object values to the server is a two step process composed of preparing 
            a list of data objects to be written, followed by writing that list to the server. </para>
            <para>This method is used in the first step to individually mark each data object in the Data 
            List as ready for writing.  It examines all data objects in the Data List that are ready for 
            writing and writes them to the server .  </para>
            </summary>
            <returns>The list of data objects whose write failed.  Results are not returned 
            data object whose writes succeeded.  If all writes succeeded,null is returned.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.PollDataChanges">
            <summary>
            <para>This method is used to poll the endpoint for changes.</para>
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataList.GetDataObject(System.UInt32)">
            <summary>
            Provides access to an Xi Data Object in the XiDataList using the client alias used as 
            the key in the list, represented as a keyed collectin (_ListElements.Dictionary).
            </summary>
            <param name="clientAlias">The client alias of the data object to be returned.</param>
            <returns>The data object identified by the clientAlias.</returns>
        </member>
        <member name="E:Xi.Client.Base.API.IXiDataList.ValuesUpdateEvent">
            <summary>
            This event is used to return values to the client application.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiDataJournalList">
            <summary>
            This interface defines access to Data Journal Lists.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.AddNewDataObjectToDataJournalList(Xi.Contracts.Data.InstanceId,System.Boolean)">
            <summary>
            This method is used to create and add a new data object to a Journal Data List.  The new data 
            object is created using its InstanceId.
            </summary>
            <param name="instanceId">The InstanceId of the data object to create and add.</param>
            <param name="bPrepOnly">
            <para>When a new element is added to the local Xi List, this parameter can be 
            set to FALSE to cause this element and any other locally added elements to be 
            immediately added to the Xi Server. </para>
            <para> Because is far more efficient to add elements to a local Xi List with this 
            parameter set to TRUE, FALSE should be used cautiously. </para>
            <para>TRUE = the new Xi Value is prepared for adding to the server.</para>
            <para>FALSE = the new Xi Value along with any other prepared Xi Values are 
            added to the server in a single call to CommitAddedElementsToServerList().</para>  
            </param>
            <returns>Returns the newly created data object.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerDataObject">
            The maximum number of values to be returned for each data object.
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no element exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.
            </summary>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            calculated and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObject})">
            <summary>
            This method is used to read changed historical values for one or more 
            data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed 
            (corrected) by an operator or other user.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="numValuesPerDataObject">
            The maximum number of values to be returned per data object.  
            </param>
            <param name="dataObjects">
            The list of data objects whose historical values are to be read.  Each 
            data object may contain zero, one, or more value sets, each of which 
            contains changed values selected and returned by the server. 
            </param>
        </member>
        <member name="M:Xi.Client.Base.API.IXiDataJournalList.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,Xi.Client.Base.API.IXiHistoricalDataObject,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="dataObject">
            The data object whose property values are to be read.
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEventList">
            <summary>
            This interface defines access to Event Lists.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEventList.Find(System.Predicate{Xi.Client.Base.API.IXiEventListElement})">
            <summary>
            This method returns event list elements selected by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against IXiEventListElement properties.</param>
            <returns>Returns event list elements selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEventList.SetListLimits(System.TimeSpan,System.TimeSpan,System.UInt32)">
            <summary>
            This method establishes the limits for the list. These limits may be negotiated by the EventList based on 
            minimums and maximums estabblished by the implementation.
            </summary>
            <param name="keepAllEventsAge">The value for the MaxKeepAllEventsAge property.</param>
            <param name="maxAnyEventAge">The value for the MaxAnyEventAge property.</param>
            <param name="maxEventListElements">The value for the MaxEventListElements property.</param>
            <returns>Returns TRUE if the properties were set.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEventList.AddEventMessageFields(System.UInt32,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for the Event List.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldObjectTypeIds">
            The list of category-specific fields to be included in the event 
            messages generated for alarms and events of the category.  Each field 
            is identified by its ObjectType LocalId obtained from the EventMessageFields 
            contained in the EventCategoryConfigurations Standard MIB element.
            </param>
            <returns>
            The ObjectTypeIds and result codes for the fields that could not be 
            added to the event message. Returns null if all succeeded.  
            </returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.Item(System.String)">
            <summary>
            This property is the indexer into the elements of the EventList. 
            </summary>
            <param name="key">The MessageKey that indexes into elements of the EventList.</param>
            <returns>The indexed IXiEventListElement. Null if not found.</returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.CategorySpecificFieldCollection">
            <summary>
            This property contains the list of additional event message fields for specific categories.  These fields can 
            be added to event messages sent by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.MaxKeepAllEventsAge">
            <summary>
            This property defines how long event list elements remain in event list.  Events that have 
            been in the local ClientBase event list longer than this time-interval are removed if they 
            did not require an action or if the required action has been taken.  For example, alarms are 
            removed if they have transitioned to the inactive state and have been acknowledged.  
            Actions may be done automatically or by an operator.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.MaxAnyEventAge">
            <summary>
            This property defines how long event list elements are permitted to remain in the event list 
            independent of their type or state.  This is done to help prevent the event list from becoming 
            excessive in size.  Clients wishing to retain a copy of events longer than this time 
            should copy them from the list before they are removed.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.MaxEventListElements">
            <summary>
            This property defines how many event list elements are permitted to be in the event list 
            independent of their type or state.  This is done to help prevent the event list from becoming 
            excessive in size.  Clients wishing to retain a copy of events longer than this time 
            should copy them from the list before they are removed.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.EventNotificationCount">
            <summary>
            This property is the count of the number of Event Notification messages received from the server.
            This count rolls-over to 1 once it reaches its max value.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEventList.TotalDeliveredEventMessages">
            <summary>
            This property is the count of the number of Event Messages received from the server.  each 
            Event Notification may contain more than one Event Message, so this count is typically 
            expected to be greater than the EventNotificationCount. 
            This count rolls-over to 1 once it reaches its max value.
            </summary>
        </member>
        <member name="E:Xi.Client.Base.API.IXiEventList.EventsUpdateEvent">
            <summary>
            This event is used to notify the client application of received Xi events and alarms.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEventJournalList">
            <summary>
            This interface defines access to Event Journal Lists.  
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiDataValue">
            <summary>
            The Xi Data Value class is the Client Base representation of data values.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.#ctor">
            <summary>
            The default constructor. It creates a data value 
            with a bad status.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.#ctor(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.Object)">
            <summary>
            The standard constructor. It creates a data value 
            from a status code, timestamp, and value.
            </summary>
            <param name="dataTypeId">
            The data Type of the value.
            </param>
            <param name="statusCode">
            The status code associated with the value.
            </param>
            <param name="dateTimeUtc">
            The UTC timestamp in DateTime format.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.#ctor(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.Double)">
            <summary>
            
            </summary>
            <param name="dataTypeId"></param>
            <param name="statusCode"></param>
            <param name="dateTimeUtc"></param>
            <param name="value"></param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.#ctor(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dataTypeId"></param>
            <param name="statusCode"></param>
            <param name="dateTimeUtc"></param>
            <param name="value"></param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.Clone">
            <summary>
            Use this method to create a clone of this instance.
            </summary>
            <returns>
            The new DataValue.
            </returns>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataValue._statusCode">
            <summary>
            This data member is the protected representation of the public StatusCode property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataValue._timeStamp">
            <summary>
            This data member is the protected representation of the public TimeStamp property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataValue._dataTypeId">
            <summary>
            This data member is the protected representation of the public DataTypeId property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataValue._dataTypeHandle">
            <summary>
            This data member is the protected representation of the public DataTypeHandle property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiDataValue._value">
            <summary>
            This data member is the protected representation of the public Value property.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.Update(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method is used to update the cached value at the completion of 
            a read, a poll or callback.
            </summary>
            <param name="dataTypeId">The data type id of the value</param>
            <param name="statusCode">The status code of the value</param>
            <param name="dateTimeUtc">The UTC timestamp of the value</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.Update(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method is used to update the cached value at the completion of 
            a read, a poll or callback.
            </summary>
            <param name="dataTypeId">The data type id of the value</param>
            <param name="statusCode">The status code of the value</param>
            <param name="dateTimeUtc">The UTC timestamp of the value</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.Update(Xi.Contracts.Data.TypeId,System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method is used to update the cached value at the completion of 
            a read, a poll or callback.
            </summary>
            <param name="dataTypeId">The data type id of the value</param>
            <param name="statusCode">The status code of the value</param>
            <param name="dateTimeUtc">The UTC timestamp of the value</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.StatusCodeAsString">
            <summary>
            Provides the Status Code as a HEX string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.DataTypeCodeAsString">
            <summary>
            May be used to obtain a .NET string for the data value type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.TimeStampAsString">
            <summary>
            Provides the Time Stamp as a string using a standard format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.ValueAsString">
            <summary>
            Used to obtain the data value as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.API.XiDataValue.ToString">
            <summary>
            Provides an simple overload for the ToString() method that combines the 
            data type, timestamp, status code, and value into a single string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataValue.StatusCode">
            <summary>
            This property is the 32-bit status associated with the value.  
            Status codes are defined by the Xi.Contracts.Data.XiStatusCode class.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataValue.TimeStamp">
            <summary>
            This property is the UTC DateTime timestamp of this value.  
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataValue.DataTypeId">
            <summary>
            This property identifies the data type that is transferred with the value.  
            This is in contrast to the XiDataObjectBase.DataTypeId that indicates the 
            requested data type for the value when the data object is added to the Xi Data List.
            When the value of this property is set, it is parsed and the DataTypeHandle 
            is extracted.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataValue.DataTypeHandle">
            <summary>
            This property contains the handle for the Data Type.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiDataValue.Value">
            <summary>
            This property is the value of the data item. 
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEndpointBase">
            <summary>
            This interface is the base interface for Xi endpoints.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointBase.HasListAttached(Xi.Client.Base.API.IXiListBase)">
            <summary>
            This method indicates, when TRUE is returned, that the specified XiList 
            has been assigned to this endpoint.
            </summary>
            <param name="xiList">The specified XiList.</param>
            <returns>Returns TRUE if the specified XiList has been assigned to this 
            endpoint, otherwise FALSE.</returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.Name">
            <summary>
            The endpoint configuration name as specified by the endpoint name attribute 
            in the server's App.config file. This name may not be unique.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.BindingName">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Binding.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.ContractName">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Contract.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.UriAddress">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Address.Uri.AbsoluteUri for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.ReceiveTimeout">
            <summary>
            This member corresponds to the receiveTimeout attribute in the 
            binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.SendTimeout">
            <summary>
            This member corresponds to the sendTimeout attribute in the 
            binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointBase.EndpointId">
            <summary>
            The unique identifier of the endpoint assigned by the server.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiContext">
            <summary>
            This interface define access to the Xi Context (the client session with the server).
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.Identify">
            <summary>
            <para>This method is used to get the description of the 
            server.  This method can be called before a context has 
            been established with the server.</para>
            </summary>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.Status">
            <summary>
            This method is used to get the state of the server, and 
            the state of any wrapped servers. 
            </summary>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.LookupResultCodes(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            <para>This method returns text descriptions of error codes.</para>  
            </summary>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns null if the starting object is a leaf, or no objects 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more objects to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.GetStandardMib">
            <summary>
            This method is used to read the standard MIB.
            </summary>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.OpenEndpoint(System.ServiceModel.Description.ServiceEndpoint,System.UInt32,System.TimeSpan)">
            <summary>
            <para>This method opens an endpoint that can be used to access one or more lists.  
            Each newly opened endpoint is assigned its own unique identifier.  It may be that 
            the server supports only one endpoint of each type (e.g. Read). In this case a 
            second attempt to open a Read endpoint will succeed and the EndpointId of the already 
            opened Read endpoint will be returned.  </para>
            </summary>
            <param name="serviceEndpoint">The serviceEndpoint of the endpoint to be opened. 
            ServiceEndpoints are retrieved from the server by the DiscoverServer() method.
            </param>
            <param name="keepAliveSkipCount">The keep-alive skip count for callback endpoints. Not used 
            and set to zero for non-callback endpoints.</param>
            <param name="callbackRate">The callback rate for callback endpoints. Not used 
            and set to zero for non-callback endpoints.</param>
            <returns>
            The definition of the endpoint.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.GetEndpointByContract(System.String)">
            <summary>
            This method is used to get the endpoint that implements the specified contractTypeName type.
            </summary>
            <param name="contractTypeName">The contractTypeName type obtained using the typeof() method. (e.g. typeof(IRead))</param>
            <returns>Returns the requested endpoint if successful, otherwise null.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.NewDataList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new data list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.NewDataJournalList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new data journal (historical data) list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.NewEventList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new event list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.NewEventJournalList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new event journal (historical events) list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.StartPolling(System.UInt32,System.Boolean)">
            <summary>
            This method is used to start the PollThread that performs automatic polling of the server. 
            </summary>
            <param name="pollRateInMilliseconds">The rate at which the poll thread executes. After 
            each execution, the poll thread sleeps for this amount of time.  Each execution, the 
            PollThread examines each XiList to be polled and polls that list if its BufferingRate 
            or PollRate expired since the last execution of the PollThread. </param>
            <param name="enable">When set to TRUE, the PollThread will issue Polls to the server. 
            When set to FALSE, the poll loop of the PollThread is disabled and Polls will not be 
            sent to the server.</param>
            <returns>The poll state of the PollThread.  If the method succeeds, the state should 
            change to the requested state.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.EnablePolling(System.Boolean)">
            <summary>
            This method is used to enable or disable polling.
            </summary>
            <param name="enable">When set to TRUE, the PollThread will issue Polls to the server. 
            When set to FALSE, the poll loop of the PollThread is disabled and Polls will not be 
            sent to the server.</param>
            <returns>The poll state of the PollThread.  If the method succeeds, the state should 
            change to the requested state.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.StopPolling">
            <summary>
            This method is used to stop the PollThread. Once stopped, the PollThread must be started 
            again to enable polling.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is used to request summary information for the 
            alarms that can be generated for a given event source.
            </summary>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiContext.ContextNotification(System.Object,Xi.Client.Base.API.XiContextNotificationData)">
            <summary>
            This method is called by the ClientBase to notify the client application of context events.
            It provides a thread safe call to the ContextNotifyEvent
            </summary>
            <param name="sender">The calling object.</param>
            <param name="ea">The notification parameters.</param>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.ContextId">
            <summary>
            This property is the server-unique identifier of the context. It is returned by the server 
            when the client application creates the context.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.LocaleId">
            <summary>
            The Windows LocaleId (language/culture id) for the context.  It is automatically 
            set to the LocaleId of the client application.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.Binding">
            <summary>
            The type of the binding used to connect to the server. 
            Obtained using GetType().ToString() on the binding.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.Tag">
            <summary>
            The property defines an object that the client application can use to 
            associate this context with an object of its choice.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.ServerDiscoveryUri">
            <summary>
            The URI that contains the ServerDiscoveryUrl used to get the ServerEntry from the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.ServerEntry">
            <summary>
            This property contains the ServerEntry for the server to which this context is connected.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.StandardMib">
            <summary>
            This property is the standard MIB of the server.  This property is retrieved from the server during establishment of the context.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.SendTimeout">
            <summary>
            This property is the WCF channel send timeout for all endpoints used by this context.  It defines 
            how long the channel will wait for a response. It should be longer than the context timeout to make 
            the keep-alive mechanism to work properly.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.ReadEndpoint">
            <summary>
            This property is the endpoint used to access IRead methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.WriteEndpoint">
            <summary>
            This property is the endpoint used to access IWrite methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.PollEndpoint">
            <summary>
            This property is the endpoint used to access IPoll methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.CallbackEndpoint">
            <summary>
            This property is the endpoint used to access IRegisterForCallback methods on the server 
            and receive ICallback methods from the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.PollState">
            <summary>
            This property provides the state of the PollThread.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiContext.PollRateInMilliseconds">
            <summary>
            The property is used to get or change the PollRate used by the poll thread.
            </summary>
        </member>
        <member name="E:Xi.Client.Base.API.IXiContext.ContextNotify">
            <summary>
            This event is used to notify the client application of context events, 
            such as the loss of communication with the server.
            All calls to this event should be made through the ContextNotification method to ensure thread safety.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiContextNotificationData">
            <summary>
            The data contained in a context notification.  The ReasonForNotification property specifies 
            why the notification is being sent.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.XiContextNotificationData.#ctor(Xi.Client.Base.API.XiContextNotificationType,System.Object,System.Exception)">
            <summary>
            This constructor creates an XiContextNotificationData object from the reason for the 
            notification, the accompanying data, and the accompanying exception, if the notification 
            reports an exception.
            </summary>
            <param name="reasonForNotification">The reason for the notification.</param>
            <param name="data">The details of the notification.</param>
            <param name="notificationException">The details of the exception if the notification reports an exception.</param>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationData._reasonForNotification">
            <summary>
            This data member is the private representation of the ReasonForNotification property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationData._data">
            <summary>
            This data member is the private representation of the Data property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationData._notificationException">
            <summary>
            This data member is the private representation of the NotificationException property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiContextNotificationData.ReasonForNotification">
            <summary>
            This property specifies the reason for the notification.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiContextNotificationData.Data">
            <summary>
            This property contains the details about the notification.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.XiContextNotificationData.NotificationException">
            <summary>
            This property contains the exception, if any, associated with the notification.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiContextNotification">
            <summary>
            Use a method of this type to receive notifications from the Context.
            </summary>
            <param name="sender">The calling object.</param>
            <param name="ea">The data contained in the notification.</param>
        </member>
        <member name="T:Xi.Client.Base.API.PollState">
            <summary>
            Defines the state of the PollThread
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.PollState.Inactive">
            <summary>
            // the PollThread is not running
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.PollState.Enabled">
            <summary>
            The PollThread is enabled and sends Polls to the server 
            for data lists based on their BufferingRate or UpdateRate.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.PollState.Disabled">
            <summary>
            The PollThread is running, but is disabled. While in this 
            state it does not send Poll requests to the server.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.XiContextNotificationType">
            <summary>
            This enumeration indicates why the notification is being sent.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.Shutdown">
            <summary>
            The server shutting down.
            The Data property contains a string that describes the reason for the shutdown.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.ResourceManagementDisconnected">
            <summary>
            The WCF connection to the resource management endpoint has been unexpectedly disconnected.
            The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.ResourceManagementFail">
            <summary>
            The WCF connection to the resource management endpoint has been unexpectedly disconnected and is not recoverable.
            The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.EndpointDisconnected">
            <summary>
            The WCF connection to a non-resource management endpoint has been unexpectedly disconnected.
            The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.EndpointFail">
            <summary>
            The WCF connection to a non-resource management endpoint has been unexpectedly disconnected and is not recoverable.
            The Data property contains a string that describes the failure.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.Discards">
            <summary>
            Data updates or event messages cached by the server for polling have been discarded by the server due to failure to receive a poll for them. 
            The Data property contains a uint that indicates the number discarded.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.TypeConversionError">
            <summary>
            A type conversion error has occurred in the client on received data.
            The Data property contains a string that describes the conversion error.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.ClientKeepAliveException">
            <summary>
            A FaultException was received from the server for a ClientKeepAlive request that was issued by the ClientBase.
            The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.ReInitiateException">
            <summary>
            A FaultException was received from the server for a ReInitiate request that was issued by the ClientBase.
            The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.PollException">
            <summary>
            A FaultException was received from the server for Poll request that was issued by the ClientBase.
            The FaultException type accompanies this notification type.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.API.XiContextNotificationType.GeneralException">
            <summary>
            A general Exception was received for a request that was issued by the ClientBase.
            The Exception type accompanies this notification type.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.API.IXiEndpointDiscovery">
            <summary>
            This interface is the interface for Xi endpoints.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointDiscovery.GetServiceEndpointByContractAndUrl(System.String,System.String)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            endpoint URL.
            </summary>
            <param name="contractType">The contractType type of the desired endpoint.</param>
            <param name="url">The URL of the desired endpoint</param>
            <returns>Returns the endpoint with the specified contractType and endpoint URL</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointDiscovery.GetServiceEndpointsByScheme(System.String,System.String)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            protocol scheme.
            </summary>
            <param name="contractType">The contractType type of the desired endpoints.</param>
            <param name="scheme">The protocol scheme of the desired endpoints.</param>
            <returns>Returns the endpoints with the specified contractType and protocol scheme.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointDiscovery.GetServiceEndpointsByBinding(System.String,System.Type)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            binding type.
            </summary>
            <param name="contractType">The contractType type of the desired endpoints.</param>
            <param name="binding">The binding type of the desired endpoints.</param>
            <returns>Returns the endpoint with the specified contractType and binding type.</returns>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointDiscovery.RankReadWriteSubscribeEndpoints(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            This method ranks the Read, Write, or Subscribe endpoints.  Those with the same binding type 
            as the Resource Management endpoint used to connect to the server are ranked first, followed 
            by tcp, wshttp, and basic http. This method is called after the client connects to the server.
            </summary>
            <param name="connectedResourceManagementEndpoint">The resource management endpoint to which the 
            client is connected.</param>
        </member>
        <member name="M:Xi.Client.Base.API.IXiEndpointDiscovery.GetRankedReadWriteSubscribeServiceEndpoints(System.String)">
            <summary>
            This method searches the list of endpoints for the endpoints with the specified contractType type
            </summary>
            <param name="contractType">The contractType type of the desired endpoint.</param>
            <returns>Returns the endpoints with the specified contractType type</returns>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.ServerEntry">
            <summary>
            The ServerEntry for the server associated with the endpoints.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.HostName">
            <summary>
            The hostname or IP address for the server associated with the endpoints.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.Port">
            <summary>
            The TCP Port number for the server's server discovery endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.ResourceManagementServiceEndpoints">
            <summary>
            The list of ranked resource management endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.ReadServiceEndpoints">
            <summary>
            The list of ranked read endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.WriteServiceEndpoints">
            <summary>
            The list of ranked write endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.PollServiceEndpoints">
            <summary>
            The list of ranked poll endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.API.IXiEndpointDiscovery.RegisterForCallbackServiceEndpoints">
            <summary>
            The list of ranked callback endpoints supported by the server.
            </summary>
        </member>
    </members>
</doc>
