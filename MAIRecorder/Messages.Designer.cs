//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.6407
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MAIRecorder {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MAIRecorder.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The selected samplerate is too high for  live data display. Press OK  to proceed anyway. ähnelt.
        /// </summary>
        internal static string AudioPerformanceCritical {
            get {
                return ResourceManager.GetString("AudioPerformanceCritical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The selected samplerate is too high for  live data display. Press OK  to proceed anyway. ähnelt.
        /// </summary>
        internal static string AudioPerformanceRecCritical {
            get {
                return ResourceManager.GetString("AudioPerformanceRecCritical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The selected samplerate is too high for  live data display. Press OK  to proceed anyway. ähnelt.
        /// </summary>
        internal static string AudioPerformanceRecPreviewCritical {
            get {
                return ResourceManager.GetString("AudioPerformanceRecPreviewCritical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Possible USB performance issue ähnelt.
        /// </summary>
        internal static string AudioPerformanceWarningCaption {
            get {
                return ResourceManager.GetString("AudioPerformanceWarningCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Datenbank wurde gefunden bzw. erfolgreich erstellt ähnelt.
        /// </summary>
        internal static string DBConnectionEstablishedCaption {
            get {
                return ResourceManager.GetString("DBConnectionEstablishedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Datenbank verbunden ähnelt.
        /// </summary>
        internal static string DBConnectionEstablishedText {
            get {
                return ResourceManager.GetString("DBConnectionEstablishedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No ethernet connection ähnelt.
        /// </summary>
        internal static string ETHErrorCaption {
            get {
                return ResourceManager.GetString("ETHErrorCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die invalid IP Adress ähnelt.
        /// </summary>
        internal static string ETHErrorText_IPAdress {
            get {
                return ResourceManager.GetString("ETHErrorText_IPAdress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die invalid TCP Port ähnelt.
        /// </summary>
        internal static string ETHErrorText_IPPort {
            get {
                return ResourceManager.GetString("ETHErrorText_IPPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die connction to remote device failed. ähnelt.
        /// </summary>
        internal static string ETHErrorText_NoConnection {
            get {
                return ResourceManager.GetString("ETHErrorText_NoConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die invalid UDP Port ähnelt.
        /// </summary>
        internal static string ETHErrorText_UDPPort {
            get {
                return ResourceManager.GetString("ETHErrorText_UDPPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die license file not found ähnelt.
        /// </summary>
        internal static string NoLicenseFoundCaption {
            get {
                return ResourceManager.GetString("NoLicenseFoundCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die license file not found. Will record invalid data ! ähnelt.
        /// </summary>
        internal static string NoLicenseFoundText {
            get {
                return ResourceManager.GetString("NoLicenseFoundText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die AD Channels ähnelt.
        /// </summary>
        internal static string ToolTipCaptionAD {
            get {
                return ResourceManager.GetString("ToolTipCaptionAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die CT Channels ähnelt.
        /// </summary>
        internal static string ToolTipCaptionCT {
            get {
                return ResourceManager.GetString("ToolTipCaptionCT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DA Channels ähnelt.
        /// </summary>
        internal static string ToolTipCaptionDA {
            get {
                return ResourceManager.GetString("ToolTipCaptionDA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die TTL Channels ähnelt.
        /// </summary>
        internal static string ToolTipCaptionTTL {
            get {
                return ResourceManager.GetString("ToolTipCaptionTTL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Click on the Channel&apos;s name to configure it. ähnelt.
        /// </summary>
        internal static string ToolTipTextClickonChannel {
            get {
                return ResourceManager.GetString("ToolTipTextClickonChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Click coloured HI/LO label to switch the state of an output. ähnelt.
        /// </summary>
        internal static string ToolTipTextClickonChannelTTL {
            get {
                return ResourceManager.GetString("ToolTipTextClickonChannelTTL", resourceCulture);
            }
        }
    }
}
